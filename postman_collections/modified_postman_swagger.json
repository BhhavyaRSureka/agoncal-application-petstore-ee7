{
  "item": [
    {
      "id": "7c0eb592-466d-450d-99da-28968274c7d8",
      "name": "categories",
      "item": [
        {
          "id": "a9d307ff-c921-48cc-9abe-fd610fd639d3",
          "name": "Lists all the categories",
          "request": {
            "name": "Lists all the categories",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "categories"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "start",
                  "value": "{{start}}"
                },
                {
                  "disabled": false,
                  "key": "max",
                  "value": "{{max}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/xml"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "cfb64d71-fe8d-4f1f-9f07-1251e05ab2c7",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "categories"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "start",
                      "value": "{{start}}"
                    },
                    {
                      "key": "max",
                      "value": "{{max}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/xml"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"description\": \"occaecat\",\n    \"name\": \"sint culp\",\n    \"id\": 27023679,\n    \"version\": -96547499\n  },\n  {\n    \"description\": \"dolor consectetur est\",\n    \"name\": \"cillum laboris fugia\",\n    \"id\": -32186039,\n    \"version\": -86149420\n  }\n]",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /categories?start=<integer>&max=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "d2a3f901-d628-4d40-bae0-52ac71f44761",
          "name": "Creates a category",
          "request": {
            "name": "Creates a category",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "categories"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": null
          },
          "response": [
            {
              "id": "9c12bac5-8dc2-4dcd-8d9f-c28b14a08c07",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "categories"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /categories for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "1ed33571-7522-4d63-a292-bf1385ec1005",
          "name": "{id}",
          "item": [
            {
              "id": "cfa9d7f6-b588-4512-888f-bdf7acb48723",
              "name": "Finds a category given an identifier",
              "request": {
                "name": "Finds a category given an identifier",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "categories",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) "
                    }
                  ]
                },
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "id": "dba00c0d-f880-4427-8118-080bb0205d3e",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "categories",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) "
                        }
                      ]
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /categories/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "cc284dbf-2dcc-4afa-bb5e-0540d6937878",
              "name": "Updates a category",
              "request": {
                "name": "Updates a category",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "categories",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "auth": null
              },
              "response": [
                {
                  "id": "5b5f3032-dcea-431e-b7a5-e6debc0b419f",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "categories",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "PUT",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /categories/:id for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "37a28cab-5b5f-49b1-8571-a801df33172e",
              "name": "Deletes a category by id",
              "request": {
                "name": "Deletes a category by id",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "categories",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) "
                    }
                  ]
                },
                "method": "DELETE",
                "auth": null
              },
              "response": [
                {
                  "id": "211fa61d-2aa3-4805-8943-921a873a6ad0",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "categories",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) "
                        }
                      ]
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /categories/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "2379e2f0-fe1d-4de3-9ce9-630c5bb8b14d",
      "name": "countries",
      "item": [
        {
          "id": "ed7c5b3b-f70c-4e3b-8353-18a9f1c79750",
          "name": "Lists all the countries",
          "request": {
            "name": "Lists all the countries",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "countries"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "start",
                  "value": "{{start}}"
                },
                {
                  "disabled": false,
                  "key": "max",
                  "value": "{{max}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/xml"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "a30172f7-a1af-43ae-a346-0aca3102fa25",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "countries"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "start",
                      "value": "{{start}}"
                    },
                    {
                      "key": "max",
                      "value": "{{max}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/xml"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"iso3\": \"adi\",\n    \"isoCode\": \"in\",\n    \"name\": \"sit et nisi\",\n    \"numcode\": \"exe\",\n    \"printableName\": \"proident\",\n    \"id\": 42081915,\n    \"version\": -20673415\n  },\n  {\n    \"iso3\": \"dol\",\n    \"isoCode\": \"ve\",\n    \"name\": \"aliqua cupidatat amet dolor\",\n    \"numcode\": \"ani\",\n    \"printableName\": \"consequat velit\",\n    \"id\": 55690138,\n    \"version\": -76223727\n  }\n]",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /countries?start=<integer>&max=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "106a5da9-0254-4b24-826f-6068c794dc40",
          "name": "Creates a country",
          "request": {
            "name": "Creates a country",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "countries"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": null
          },
          "response": [
            {
              "id": "579e97a0-470d-4caf-a151-869920c7d96d",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "countries"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /countries for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "b9127180-e7f9-4873-8778-c8361c510dcd",
          "name": "{id}",
          "item": [
            {
              "id": "d842fbbf-0e06-4214-a847-db4373695480",
              "name": "Retrieves a country by its id",
              "request": {
                "name": "Retrieves a country by its id",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "countries",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) "
                    }
                  ]
                },
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "id": "fb0e308e-869d-4d7f-bb6b-d0e6f6487264",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "countries",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) "
                        }
                      ]
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /countries/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "7e462667-5f92-4311-b41f-46fc8e0454f7",
              "name": "Updates a country",
              "request": {
                "name": "Updates a country",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "countries",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "auth": null
              },
              "response": [
                {
                  "id": "393ff33c-95c9-4b49-b6a6-2e6f6adf3127",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "countries",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "PUT",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /countries/:id for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "37e794c6-2a7e-49d1-9512-482612788050",
              "name": "Deletes a country given an id",
              "request": {
                "name": "Deletes a country given an id",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "countries",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) "
                    }
                  ]
                },
                "method": "DELETE",
                "auth": null
              },
              "response": [
                {
                  "id": "834ef140-512f-460f-996b-aaeb52018be0",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "countries",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) "
                        }
                      ]
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /countries/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "5ca9bcd4-e625-406f-a561-6b1ed2da7665",
      "name": "customers",
      "item": [
        {
          "id": "5df474b3-9b48-4f01-822e-dec791f6ca74",
          "name": "Lists all the customers",
          "request": {
            "name": "Lists all the customers",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "start",
                  "value": "{{start}}"
                },
                {
                  "disabled": false,
                  "key": "max",
                  "value": "{{max}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/xml"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "6712d12b-d04b-4321-9ec8-59573b43b108",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "start",
                      "value": "{{start}}"
                    },
                    {
                      "key": "max",
                      "value": "{{max}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/xml"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"firstName\": \"dolore veniam\",\n    \"lastName\": \"Ut\",\n    \"password\": \"anim\",\n    \"id\": 66435281,\n    \"version\": -62226863,\n    \"telephone\": \"cu\",\n    \"email\": \"nostrud eiusmod\",\n    \"login\": \"Ut labore est minim adipisicing\",\n    \"uuid\": \"fugiat dolor exercitation sunt\",\n    \"role\": \"USER\",\n    \"dateOfBirth\": \"2010-05-18T16:37:18.572Z\",\n    \"age\": -40114084,\n    \"homeAddress\": {\n      \"city\": \"reprehenderit amet exercitation anim veniam\",\n      \"street1\": \"veniam fugiat\",\n      \"zipcode\": \"el\",\n      \"street2\": \"velit esse fugiat eu sit\",\n      \"state\": \"irure fugiat\",\n      \"country\": {\n        \"iso3\": \"Ut \",\n        \"isoCode\": \"de\",\n        \"name\": \"ullamco\",\n        \"numcode\": \"com\",\n        \"printableName\": \"labore eiusmod\",\n        \"id\": 13862578,\n        \"version\": 70634753\n      }\n    },\n    \"fullName\": \"ad laborum veniam ipsum mollit\"\n  },\n  {\n    \"firstName\": \"ea pariatur sunt et\",\n    \"lastName\": \"voluptate ut exercitation pariatur\",\n    \"password\": \"tempor culpa\",\n    \"id\": 73267972,\n    \"version\": -64006578,\n    \"telephone\": \"enim ex incididunt\",\n    \"email\": \"nisi ipsum\",\n    \"login\": \"ullamco veniam in\",\n    \"uuid\": \"nisi\",\n    \"role\": \"ADMIN\",\n    \"dateOfBirth\": \"1965-03-23T12:15:04.417Z\",\n    \"age\": 32598304,\n    \"homeAddress\": {\n      \"city\": \"dolore dolore ex\",\n      \"street1\": \"nostrud adipisici\",\n      \"zipcode\": \"adipisi\",\n      \"street2\": \"eiusmod labore velit\",\n      \"state\": \"anim ad\",\n      \"country\": {\n        \"iso3\": \"do \",\n        \"isoCode\": \"ut\",\n        \"name\": \"nulla aliquip\",\n        \"numcode\": \"in \",\n        \"printableName\": \"amet occaecat\",\n        \"id\": 54026435,\n        \"version\": 71529037\n      }\n    },\n    \"fullName\": \"elit non\"\n  }\n]",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /customers?start=<integer>&max=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "2feeb8f0-a292-4d03-8d45-a2fe7618c157",
          "name": "Creates a customer",
          "request": {
            "name": "Creates a customer",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "customers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": null
          },
          "response": [
            {
              "id": "6fb1096d-de0d-41a2-8dbc-bcad8fd44d82",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "customers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /customers for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "6cb9d06b-30ed-4912-b6b6-5ac9e59b64aa",
          "name": "{id}",
          "item": [
            {
              "id": "01b0c831-d3de-4bce-acc3-57fe8c1e91a9",
              "name": "Finds a customer by it identifier",
              "request": {
                "name": "Finds a customer by it identifier",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "customers",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) "
                    }
                  ]
                },
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "id": "598535b5-4c57-40a3-985b-e981a3cd04ab",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "customers",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) "
                        }
                      ]
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /customers/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "20d0f9f6-a308-464b-9c5c-245658ace5f4",
              "name": "Updates a customer",
              "request": {
                "name": "Updates a customer",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "customers",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "auth": null
              },
              "response": [
                {
                  "id": "a647b128-83b8-448f-9317-314566a7e81a",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "customers",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "PUT",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /customers/:id for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "4f90f00a-959c-4ff2-94d4-1972013ad377",
              "name": "Deletes a customer by id",
              "request": {
                "name": "Deletes a customer by id",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "customers",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) "
                    }
                  ]
                },
                "method": "DELETE",
                "auth": null
              },
              "response": [
                {
                  "id": "4eebcedc-cdaf-419f-b921-cd2fcb38bab6",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "customers",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) "
                        }
                      ]
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /customers/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "2821a0fe-fc3d-4bd0-b86b-d026b5bf3405",
      "name": "items",
      "item": [
        {
          "id": "78c6782f-1db3-479a-803b-da684d2e6e9a",
          "name": "Lists all items",
          "request": {
            "name": "Lists all items",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "items"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "start",
                  "value": "{{start}}"
                },
                {
                  "disabled": false,
                  "key": "max",
                  "value": "{{max}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/xml"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "811b7ba5-aee1-44f6-b0c1-8e3946e4b6a9",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "items"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "start",
                      "value": "{{start}}"
                    },
                    {
                      "key": "max",
                      "value": "{{max}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/xml"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"description\": \"nostrud nisi\",\n    \"name\": \"Lorem consequat s\",\n    \"unitCost\": 86420605.01994061,\n    \"id\": 33915472,\n    \"version\": -15805912,\n    \"imagePath\": \"ullamco Dui\",\n    \"product\": {\n      \"description\": \"velit Duis officia in sed\",\n      \"name\": \"mollit\",\n      \"id\": 64718308,\n      \"version\": -50856789,\n      \"category\": {\n        \"description\": \"id nulla amet Lorem\",\n        \"name\": \"veniam\",\n        \"id\": 99614337,\n        \"version\": 8737509\n      }\n    }\n  },\n  {\n    \"description\": \"aliquip eiusmod reprehenderit in\",\n    \"name\": \"aliq\",\n    \"unitCost\": 91715667.86935902,\n    \"id\": -40944935,\n    \"version\": -39833067,\n    \"imagePath\": \"et ut\",\n    \"product\": {\n      \"description\": \"proident consectetur ea exercitation\",\n      \"name\": \"occaecat con\",\n      \"id\": 71084870,\n      \"version\": -54676869,\n      \"category\": {\n        \"description\": \"eu consequat in magna Lorem\",\n        \"name\": \"ut nostrud sunt q\",\n        \"id\": 64251409,\n        \"version\": 56503002\n      }\n    }\n  }\n]",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /items?start=<integer>&max=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "b73048d3-310d-4c25-bcf4-c9ce1f93e450",
          "name": "Creates a new item",
          "request": {
            "name": "Creates a new item",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "items"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": null
          },
          "response": [
            {
              "id": "26237829-f19a-40d4-9356-7ae67306b866",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "items"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /items for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "724fad58-3b3c-45f5-8193-292eb02c9fc8",
          "name": "{id}",
          "item": [
            {
              "id": "2de9ce56-77f6-4d1c-b88f-fcab64c46ff8",
              "name": "Finds an item by its id",
              "request": {
                "name": "Finds an item by its id",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "items",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) "
                    }
                  ]
                },
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "id": "2fbdcc9c-a101-4bf5-b953-5f8633e195ce",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "items",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) "
                        }
                      ]
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /items/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "628b1c31-3962-4e54-9496-e1e7aa2da548",
              "name": "Updates an item",
              "request": {
                "name": "Updates an item",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "items",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "auth": null
              },
              "response": [
                {
                  "id": "85d63fa9-1648-4ac6-ab79-5580ed8a9001",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "items",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "PUT",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /items/:id for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "1d9a0514-7a92-4715-a37e-0f4e506c8655",
              "name": "Deletes an item by its id",
              "request": {
                "name": "Deletes an item by its id",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "items",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) "
                    }
                  ]
                },
                "method": "DELETE",
                "auth": null
              },
              "response": [
                {
                  "id": "c878aa84-0887-434d-8ace-48febee99369",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "items",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) "
                        }
                      ]
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /items/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    },
    {
      "id": "9300da12-964d-42c1-88c3-75fd8da90794",
      "name": "products",
      "item": [
        {
          "id": "6810c709-8dab-4dc9-8e75-8c64d435e5e3",
          "name": "Lists all products",
          "request": {
            "name": "Lists all products",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "products"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "disabled": false,
                  "key": "start",
                  "value": "{{start}}"
                },
                {
                  "disabled": false,
                  "key": "max",
                  "value": "{{max}}"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/xml"
              }
            ],
            "method": "GET",
            "auth": null
          },
          "response": [
            {
              "id": "a18a27a9-b1cf-4770-b584-6584256ce98f",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "start",
                      "value": "{{start}}"
                    },
                    {
                      "key": "max",
                      "value": "{{max}}"
                    }
                  ],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/xml"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"description\": \"cupidatat esse qui ea\",\n    \"name\": \"Ut elit Lore\",\n    \"id\": 48576295,\n    \"version\": 58172932,\n    \"category\": {\n      \"description\": \"sunt dolore incididunt ut\",\n      \"name\": \"dolore pariatu\",\n      \"id\": 71780223,\n      \"version\": -88548291\n    }\n  },\n  {\n    \"description\": \"in nostrud qui sed\",\n    \"name\": \"sunt of\",\n    \"id\": -71232693,\n    \"version\": 91756249,\n    \"category\": {\n      \"description\": \"proident\",\n      \"name\": \"incididunt eiusmod Duis \",\n      \"id\": 82287121,\n      \"version\": 40056394\n    }\n  }\n]",
              "cookie": [],
              "_postman_previewlanguage": "json"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /products?start=<integer>&max=<integer> for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 200){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"OK\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "36a52ad5-d281-436c-bee5-d14a978c9d82",
          "name": "Creates new product",
          "request": {
            "name": "Creates new product",
            "description": {
              "content": "",
              "type": "text/plain"
            },
            "url": {
              "path": [
                "products"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": null
          },
          "response": [
            {
              "id": "a3794b83-e37c-4c9b-857e-d4ca1679490b",
              "name": "successful operation",
              "originalRequest": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {}
              },
              "status": "Internal Server Error",
              "code": 500,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "body": "",
              "cookie": [],
              "_postman_previewlanguage": "text"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /products for http method type post in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        {
          "id": "0a1e4010-dc08-4c2a-a0e6-06a530a5ea13",
          "name": "{id}",
          "item": [
            {
              "id": "a799872e-14e3-46c0-98c9-ed526133572d",
              "name": "Finds a product by id",
              "request": {
                "name": "Finds a product by id",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) "
                    }
                  ]
                },
                "method": "GET",
                "auth": null
              },
              "response": [
                {
                  "id": "18c5dffb-51ef-49f3-9934-c32be1f8845d",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "products",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) "
                        }
                      ]
                    },
                    "method": "GET",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /products/:id for http method type get in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "ae0d8bc0-c34b-4196-baf0-751ef3b021c3",
              "name": "Updates a product",
              "request": {
                "name": "Updates a product",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "auth": null
              },
              "response": [
                {
                  "id": "27969b85-5e63-493b-aa95-729c35f23523",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "products",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "method": "PUT",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /products/:id for http method type put in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            },
            {
              "id": "105662a1-92d9-4916-adf3-edac3612cfe1",
              "name": "Deletes a product by id",
              "request": {
                "name": "Deletes a product by id",
                "description": {
                  "content": "",
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "disabled": false,
                      "type": "any",
                      "value": "{{id}}",
                      "key": "id",
                      "description": "(Required) "
                    }
                  ]
                },
                "method": "DELETE",
                "auth": null
              },
              "response": [
                {
                  "id": "2cd87991-aa4f-40ea-9392-9b20361907d9",
                  "name": "successful operation",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "products",
                        ":id"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": [
                        {
                          "disabled": false,
                          "type": "any",
                          "value": "{{id}}",
                          "key": "id",
                          "description": "(Required) "
                        }
                      ]
                    },
                    "method": "DELETE",
                    "body": {}
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "body": "",
                  "cookie": [],
                  "_postman_previewlanguage": "text"
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "exec": [
                      " \n// ********RoostGPT********\n/*\nTest generated by RoostGPT for test ZBIO-5239-Test using AI Type Open AI and AI Model gpt-4\n\n\nTest generated for /products/:id for http method type delete in postman framework\n\n*/\n\n// ********RoostGPT********\n\nlet responseData;\nconst contentType = pm.response.headers.get('Content-Type');\nif(contentType === \"application/xml\"){\n    responseData = xml2Json(responseBody);\n} else{\n    responseData = pm.response.json();\n}\nif (pm.variables.get(\"statusCode\")) {\n  // Compare the statusCode variable with the response code for assertion\n  pm.expect(parseInt(pm.variables.get(\"statusCode\"))).to.be.equal(pm.response.code);\n}\n\n// let responseTime = 800\n// pm.expect(pm.response.responseTime).to.be.below(responseTime);\n\nif (pm.response.code == 500){\n    pm.test(\"successful operation\", function () {\n      pm.expect(pm.response.status).to.be.eql(\"Internal Server Error\");});\n}\n"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": []
        }
      ],
      "event": []
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "http://localhost:8080/applicationPetstore/rest",
      "key": "baseUrl"
    },
    {
      "type": "integer",
      "value": 200,
      "key": "statusCode"
    }
  ],
  "info": {
    "_postman_id": "d4ddf6b9-646e-4102-955b-10ca5fcf3916",
    "name": "Petstore APIs",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "PetStore APIs exposed\n\nContact Support:\n Name: Antonio Goncalves\n Email: antonio.goncalves@gmail.com",
      "type": "text/plain"
    }
  }
}