/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro

 You are requested to write test scenarios to validate the business logic of the given code snippet. The code snippet is a hashCode() method.

**Test Scenario 1:**
- **Objective:** To verify that the hashCode() method returns the same hash code for two objects with the same name and description.
- **Steps:**
  1. Create two objects with the same name and description.
  2. Call the hashCode() method on both objects.
  3. Assert that the hash codes are equal.

**Test Scenario 2:**
- **Objective:** To verify that the hashCode() method returns different hash codes for two objects with different names.
- **Steps:**
  1. Create two objects with different names but the same description.
  2. Call the hashCode() method on both objects.
  3. Assert that the hash codes are different.

**Test Scenario 3:**
- **Objective:** To verify that the hashCode() method returns different hash codes for two objects with different descriptions.
- **Steps:**
  1. Create two objects with the same name but different descriptions.
  2. Call the hashCode() method on both objects.
  3. Assert that the hash codes are different.

**Test Scenario 4:**
- **Objective:** To verify that the hashCode() method returns different hash codes for two objects with different names and descriptions.
- **Steps:**
  1. Create two objects with different names and descriptions.
  2. Call the hashCode() method on both objects.
  3. Assert that the hash codes are different.

**Test Scenario 5:**
- **Objective:** To verify that the hashCode() method returns the same hash code for two objects with the same name and description, even if the objects are created in different classloaders.
- **Steps:**
  1. Create two classloaders.
  2. In each classloader, create an object with the same name and description.
  3. Call the hashCode() method on both objects.
  4. Assert that the hash codes are equal.
*/
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

class Product_hashCode_5a2657087a_Test {

    @Test
    @DisplayName("Test Scenario 1: Verify that the hashCode() method returns the same hash code for two objects with the same name and description.")
    void testHashCodeForSameNameAndDescription() {
        // Given
        String name = "Product 1";
        String description = "Description for Product 1";
        Product product1 = new Product(name, description, null);
        Product product2 = new Product(name, description, null);

        // When
        int hashCode1 = product1.hashCode();
        int hashCode2 = product2.hashCode();

        // Then
        assertEquals(hashCode1, hashCode2);
    }

    @Test
    @DisplayName("Test Scenario 2: Verify that the hashCode() method returns different hash codes for two objects with different names.")
    void testHashCodeForDifferentNames() {
        // Given
        String name1 = "Product 1";
        String name2 = "Product 2";
        String description = "Description for Product";
        Product product1 = new Product(name1, description, null);
        Product product2 = new Product(name2, description, null);

        // When
        int hashCode1 = product1.hashCode();
        int hashCode2 = product2.hashCode();

        // Then
        assertNotEquals(hashCode1, hashCode2);
    }

    @Test
    @DisplayName("Test Scenario 3: Verify that the hashCode() method returns different hash codes for two objects with different descriptions.")
    void testHashCodeForDifferentDescriptions() {
        // Given
        String name = "Product 1";
        String description1 = "Description for Product 1";
        String description2 = "Description for Product 2";
        Product product1 = new Product(name, description1, null);
        Product product2 = new Product(name, description2, null);

        // When
        int hashCode1 = product1.hashCode();
        int hashCode2 = product2.hashCode();

        // Then
        assertNotEquals(hashCode1, hashCode2);
    }

    @Test
    @DisplayName("Test Scenario 4: Verify that the hashCode() method returns different hash codes for two objects with different names and descriptions.")
    void testHashCodeForDifferentNamesAndDescriptions() {
        // Given
        String name1 = "Product 1";
        String name2 = "Product 2";
        String description1 = "Description for Product 1";
        String description2 = "Description for Product 2";
        Product product1 = new Product(name1, description1, null);
        Product product2 = new Product(name2, description2, null);

        // When
        int hashCode1 = product1.hashCode();
        int hashCode2 = product2.hashCode();

        // Then
        assertNotEquals(hashCode1, hashCode2);
    }

    @Test
    @DisplayName("Test Scenario 5: Verify that the hashCode() method returns the same hash code for two objects with the same name and description, even if the objects are created in different classloaders.")
    void testHashCodeForSameNameAndDescriptionInDifferentClassloaders() {
        // Given
        String name = "Product 1";
        String description = "Description for Product 1";

        // Create two classloaders
        ClassLoader classLoader1 = Product_hashCode_5a2657087a_Test.class.getClassLoader();
        ClassLoader classLoader2 = new ClassLoader() {
            @Override
            protected Class<?> findClass(String name) throws ClassNotFoundException {
                return Product_hashCode_5a2657087a_Test.class;
            }
        };

        // Create two objects in different classloaders
        Product product1 = (Product) classLoader1.loadClass("org.agoncal.application.petstore.model.Product").newInstance();
        product1.setName(name);
        product1.setDescription(description);

        Product product2 = (Product) classLoader2.loadClass("org.agoncal.application.petstore.model.Product").newInstance();
        product2.setName(name);
        product2.setDescription(description);

        // When
        int hashCode1 = product1.hashCode();
        int hashCode2 = product2.hashCode();

        // Then
        assertEquals(hashCode1, hashCode2);
    }
}
