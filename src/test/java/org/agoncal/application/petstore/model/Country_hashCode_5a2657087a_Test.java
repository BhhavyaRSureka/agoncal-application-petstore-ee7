/*
Test generated by RoostGPT for test JavaTesting using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Test with a valid `isoCode`
- Description: This test will verify that the `hashCode()` function generates the correct hash code for a valid `isoCode`. 
- Input: A valid `isoCode` that has been initialized and assigned a value.
- Expected Output: The hash code for the `isoCode`.

Test Scenario 2: Test with a null `isoCode`
- Description: This test will verify how the `hashCode()` function handles a null `isoCode`. Since `Objects.hash()` can handle null values, it should not throw a NullPointerException.
- Input: A `isoCode` that is null.
- Expected Output: A hash code of 0, as `Objects.hash()` returns 0 for null inputs.

Test Scenario 3: Test with an empty `isoCode`
- Description: This test will verify how the `hashCode()` function handles an empty `isoCode`. 
- Input: An `isoCode` that is an empty string.
- Expected Output: The hash code for the empty `isoCode`.

Test Scenario 4: Test with a long `isoCode`
- Description: This test will verify that the `hashCode()` function can handle a long `isoCode`.
- Input: A `isoCode` that is a long string.
- Expected Output: The hash code for the long `isoCode`.

Test Scenario 5: Test with different `isoCode`s producing different hash codes
- Description: This test will verify that the `hashCode()` function generates different hash codes for different `isoCode`s.
- Input: Two different `isoCode`s.
- Expected Output: Two different hash codes.

Test Scenario 6: Test with identical `isoCode`s producing same hash codes
- Description: This test will verify that the `hashCode()` function generates the same hash code for identical `isoCode`s.
- Input: Two identical `isoCode`s.
- Expected Output: Two identical hash codes.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Test;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class Country_hashCode_5a2657087a_Test {

    @Test
    public void testHashCodeWithValidIsoCode() {
        Country country = new Country();
        country.setIsoCode("US");
        int expectedHashCode = Objects.hash("US");
        assertEquals(expectedHashCode, country.hashCode());
    }

    @Test
    public void testHashCodeWithNullIsoCode() {
        Country country = new Country();
        country.setIsoCode(null);
        int expectedHashCode = Objects.hash((String) null);
        assertEquals(expectedHashCode, country.hashCode());
    }

    @Test
    public void testHashCodeWithEmptyIsoCode() {
        Country country = new Country();
        country.setIsoCode("");
        int expectedHashCode = Objects.hash("");
        assertEquals(expectedHashCode, country.hashCode());
    }

    @Test
    public void testHashCodeWithLongIsoCode() {
        Country country = new Country();
        country.setIsoCode("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        int expectedHashCode = Objects.hash("ABCDEFGHIJKLMNOPQRSTUVWXYZ");
        assertEquals(expectedHashCode, country.hashCode());
    }

    @Test
    public void testHashCodeWithDifferentIsoCodes() {
        Country country1 = new Country();
        country1.setIsoCode("US");
        Country country2 = new Country();
        country2.setIsoCode("UK");
        assertNotEquals(country1.hashCode(), country2.hashCode());
    }

    @Test
    public void testHashCodeWithIdenticalIsoCodes() {
        Country country1 = new Country();
        country1.setIsoCode("US");
        Country country2 = new Country();
        country2.setIsoCode("US");
        assertEquals(country1.hashCode(), country2.hashCode());
    }
}
