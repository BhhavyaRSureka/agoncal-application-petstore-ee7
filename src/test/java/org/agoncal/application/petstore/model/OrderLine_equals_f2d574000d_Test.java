/*
Test generated by RoostGPT for test JavaTesting using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Object Comparison with Itself
- Given an OrderLine object, when we compare the object with itself, then the equals function should return true.

Test Scenario 2: Object Comparison with Null
- Given an OrderLine object, when we compare the object with null, then the equals function should return false.

Test Scenario 3: Object Comparison with Different Class
- Given an OrderLine object, when we compare the object with an object of a different class, then the equals function should return false.

Test Scenario 4: Object Comparison with Same Class but Different Quantity
- Given two OrderLine objects with the same item but different quantities, when we compare the two objects, then the equals function should return false.

Test Scenario 5: Object Comparison with Same Class but Different Item
- Given two OrderLine objects with the same quantity but different items, when we compare the two objects, then the equals function should return false.

Test Scenario 6: Object Comparison with Same Class and Same Quantity and Item
- Given two OrderLine objects with the same quantity and item, when we compare the two objects, then the equals function should return true.

Test Scenario 7: Object Comparison with Same Class but One of the Fields is Null
- Given two OrderLine objects, one with a null field (either quantity or item), when we compare the two objects, then the equals function should return false.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class OrderLine_equals_f2d574000d_Test {

    private OrderLine orderLine1, orderLine2;
    private Item item1, item2;

    @BeforeEach
    void setUp() {
        item1 = new Item("Item1", 10.0f, "path1", "desc1", null);
        item2 = new Item("Item2", 20.0f, "path2", "desc2", null);
        orderLine1 = new OrderLine(5, item1);
    }

    @Test
    void testEqualsWithItself() {
        assertTrue(orderLine1.equals(orderLine1));
    }

    @Test
    void testEqualsWithNull() {
        assertFalse(orderLine1.equals(null));
    }

    @Test
    void testEqualsWithDifferentClass() {
        assertFalse(orderLine1.equals(new String("Test")));
    }

    @Test
    void testEqualsWithSameClassDifferentQuantity() {
        orderLine2 = new OrderLine(10, item1);
        assertFalse(orderLine1.equals(orderLine2));
    }

    @Test
    void testEqualsWithSameClassDifferentItem() {
        orderLine2 = new OrderLine(5, item2);
        assertFalse(orderLine1.equals(orderLine2));
    }

    @Test
    void testEqualsWithSameClassSameQuantityItem() {
        orderLine2 = new OrderLine(5, item1);
        assertTrue(orderLine1.equals(orderLine2));
    }

    @Test
    void testEqualsWithSameClassOneFieldNull() {
        orderLine2 = new OrderLine(null, item1);
        assertFalse(orderLine1.equals(orderLine2));
        orderLine2 = new OrderLine(5, null);
        assertFalse(orderLine1.equals(orderLine2));
    }
}
