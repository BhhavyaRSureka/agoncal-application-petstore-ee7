// ********RoostGPT********
/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro

 I have provided test scenarios to validate the business logic of the given code snippet function `equals`.

**Test Scenario 1:**

**Objective:** Verify that two `OrderLine` objects with the same quantity and item are considered equal.

**Test Steps:**

1. Create two instances of the `OrderLine` class with the same quantity and item.
2. Call the `equals` method on one instance, passing the other instance as an argument.
3. Assert that the result of the `equals` method is `true`.

**Expected Result:**

The result of the `equals` method is `true`.

**Test Scenario 2:**

**Objective:** Verify that two `OrderLine` objects with different quantities are considered not equal.

**Test Steps:**

1. Create two instances of the `OrderLine` class with different quantities but the same item.
2. Call the `equals` method on one instance, passing the other instance as an argument.
3. Assert that the result of the `equals` method is `false`.

**Expected Result:**

The result of the `equals` method is `false`.

**Test Scenario 3:**

**Objective:** Verify that two `OrderLine` objects with different items are considered not equal.

**Test Steps:**

1. Create two instances of the `OrderLine` class with the same quantity but different items.
2. Call the `equals` method on one instance, passing the other instance as an argument.
3. Assert that the result of the `equals` method is `false`.

**Expected Result:**

The result of the `equals` method is `false`.

**Test Scenario 4:**

**Objective:** Verify that two `OrderLine` objects with different quantities and items are considered not equal.

**Test Steps:**

1. Create two instances of the `OrderLine` class with different quantities and items.
2. Call the `equals` method on one instance, passing the other instance as an argument.
3. Assert that the result of the `equals` method is `false`.

**Expected Result:**

The result of the `equals` method is `false`.

**Test Scenario 5:**

**Objective:** Verify that the `equals` method is reflexive, transitive, and symmetric.

**Test Steps:**

1. Create three instances of the `OrderLine` class with the same quantity and item.
2. Call the `equals` method on the first instance, passing the second instance as an argument.
3. Assert that the result of the `equals` method is `true`.
4. Call the `equals` method on the second instance, passing the third instance as an argument.
5. Assert that the result of the `equals` method is `true`.
6. Call the `equals` method on the third instance, passing the first instance as an argument.
7. Assert that the result of the `equals` method is `true`.

**Expected Result:**

The result of the `equals` method is `true` in all three cases.

**Test Scenario 6:**

**Objective:** Verify that the `equals` method is consistent with the `hashCode` method.

**Test Steps:**

1. Create two instances of the `OrderLine` class with the same quantity and item.
2. Call the `hashCode` method on both instances.
3. Assert that the result of the `hashCode` method is the same for both instances.

**Expected Result:**

The result of the `hashCode` method is the same for both instances.
*/

// ********RoostGPT********
import javax.persistence.*;
import javax.validation.constraints.Min;
import java.io.Serializable;
import java.util.Objects;
import org.junit.jupiter.api.*;
import static org.junit.jupiter.api.Assertions.*;
import nl.jqno.equalsverifier.EqualsVerifier;

public class OrderLine_equals_f2d574000d_Test {

    @Test
    public void testEquals_SameObject() {
        OrderLine orderLine = new OrderLine();
        assertEquals(orderLine, orderLine);
    }

    @Test
    public void testEquals_SameValues() {
        OrderLine orderLine1 = new OrderLine(1, new Item());
        OrderLine orderLine2 = new OrderLine(1, new Item());

        assertEquals(orderLine1, orderLine2);
    }

    @Test
    public void testEquals_DifferentQuantity() {
        OrderLine orderLine1 = new OrderLine(1, new Item());
        OrderLine orderLine2 = new OrderLine(2, new Item());

        assertNotEquals(orderLine1, orderLine2);
    }

    @Test
    public void testEquals_DifferentItem() {
        OrderLine orderLine1 = new OrderLine(1, new Item());
        OrderLine orderLine2 = new OrderLine(1, new Item());
        orderLine2.setItem(new Item());

        assertNotEquals(orderLine1, orderLine2);
    }

    @Test
    public void testEquals_Null() {
        OrderLine orderLine = new OrderLine(1, new Item());

        assertNotEquals(orderLine, null);
    }

    @Test
    public void testEquals_DifferentClass() {
        OrderLine orderLine = new OrderLine(1, new Item());

        assertNotEquals(orderLine, new Object());
    }

    @Test
    public void testEqualsVerifier() {
        EqualsVerifier.forClass(OrderLine.class).usingGetClass().verify();
    }
}
