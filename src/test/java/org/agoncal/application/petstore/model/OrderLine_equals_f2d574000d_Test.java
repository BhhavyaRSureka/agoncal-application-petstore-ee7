/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro

 We recommend you to follow the TDD (Test Driven Development) approach:

**1. Test Scenario: Same Object**
   - Given two OrderLine objects that reference the same object in memory,
   - When the equals method is called,
   - Then the method should return true.

**2. Test Scenario: Null Object**
   - Given one OrderLine object and a null object,
   - When the equals method is called,
   - Then the method should return false.

**3. Test Scenario: Different Class**
   - Given an OrderLine object and an object of a different class,
   - When the equals method is called,
   - Then the method should return false.

**4. Test Scenario: Equal Quantity and Item**
   - Given two OrderLine objects with the same quantity and item,
   - When the equals method is called,
   - Then the method should return true.

**5. Test Scenario: Different Quantity**
   - Given two OrderLine objects with different quantities but the same item,
   - When the equals method is called,
   - Then the method should return false.

**6. Test Scenario: Different Item**
   - Given two OrderLine objects with the same quantity but different items,
   - When the equals method is called,
   - Then the method should return false.

**7. Test Scenario: Null Quantity**
   - Given two OrderLine objects with one having a null quantity and the other having a non-null quantity,
   - When the equals method is called,
   - Then the method should return false.

**8. Test Scenario: Null Item**
   - Given two OrderLine objects with one having a null item and the other having a non-null item,
   - When the equals method is called,
   - Then the method should return false.
*/

              - Do not change the class name, method names, and field names.
              - Do not change the name of the package.
              - Follow the Java coding conventions.
              - Do not generate comments.
              - The code should be in a single java file.
              - Do not use ; at the end of the statement.

              - TEST CASE:
              /*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro

 We recommend you to follow the TDD (Test Driven Development) approach:

**1. Test Scenario: Same Object**
   - Given two OrderLine objects that reference the same object in memory,
   - When the equals method is called,
   - Then the method should return true.

**2. Test Scenario: Null Object**
   - Given one OrderLine object and a null object,
   - When the equals method is called,
   - Then the method should return false.

**3. Test Scenario: Different Class**
   - Given an OrderLine object and an object of a different class,
   - When the equals method is called,
   - Then the method should return false.

**4. Test Scenario: Equal Quantity and Item**
   - Given two OrderLine objects with the same quantity and item,
   - When the equals method is called,
   - Then the method should return true.

**5. Test Scenario: Different Quantity**
   - Given two OrderLine objects with different quantities but the same item,
   - When the equals method is called,
   - Then the method should return false.

**6. Test Scenario: Different Item**
   - Given two OrderLine objects with the same quantity but different items,
   - When the equals method is called,
   - Then the method should return false.

**7. Test Scenario: Null Quantity**
   - Given two OrderLine objects with one having a null quantity and the other having a non-null quantity,
   - When the equals method is called,
   - Then the method should return false.

**8. Test Scenario: Null Item**
   - Given two OrderLine objects with one having a null item and the other having a non-null item,
   - When the equals method is called,
   - Then the method should return false.
*/
import javax.persistence.*;
import javax.validation.constraints.Min;
import java.io.Serializable;
import java.util.Objects;

@Entity
public class OrderLine implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @Version
    private int version;
    @Min(1)
    private Integer quantity;
    @ManyToOne
    private Item item;

    public OrderLine() {
    }

    public OrderLine(Integer quantity, Item item) {
        this.quantity = quantity;
        this.item = item;
    }

    public Float getSubTotal() {
        return item.getUnitCost() * quantity;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getVersion() {
        return version;
    }

    public void setVersion(int version) {
        this.version = version;
    }

    public Integer getQuantity() {
        return quantity;
    }

    public void setQuantity(Integer quantity) {
        this.quantity = quantity;
    }

    public Item getItem() {
        return item;
    }

    public void setItem(Item item) {
        this.item = item;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        OrderLine orderLine = (OrderLine) o;
        return quantity.equals(orderLine.quantity) && item.equals(orderLine.item);
    }

    @Override
    public int hashCode() {
        return Objects.hash(quantity, item);
    }

    @Override
    public String toString() {
        return "OrderLine{" + "id=" + id + ", version=" + version + ", quantity=" + quantity + ", item=" + item + '}';
    }
}

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class OrderLineTest {

    @Test
    void testEquals_SameObject() {
        OrderLine orderLine1 = new OrderLine(1, new Item());
        OrderLine orderLine2 = orderLine1;

        assertTrue(orderLine1.equals(orderLine2));
        assertTrue(orderLine2.equals(orderLine1));
    }

    @Test
    void testEquals_NullObject() {
        OrderLine orderLine1 = new OrderLine(1, new Item());

        assertFalse(orderLine1.equals(null));
    }

    @Test
    void testEquals_DifferentClass() {
        OrderLine orderLine1 = new OrderLine(1, new Item());

        assertFalse(orderLine1.equals(new Object()));
    }

    @Test
    void testEquals_EqualQuantityAndItem() {
        OrderLine orderLine1 = new OrderLine(1, new Item());
        OrderLine orderLine2 = new OrderLine(1, new Item());

        assertTrue(orderLine1.equals(orderLine2));
        assertTrue(orderLine2.equals(orderLine1));
    }

    @Test
    void testEquals_DifferentQuantity() {
        OrderLine orderLine1 = new OrderLine(1, new Item());
        OrderLine orderLine2 = new OrderLine(2, new Item());

        assertFalse(orderLine1.equals(orderLine2));
        assertFalse(orderLine2.equals(orderLine1));
    }

    @Test
    void testEquals_DifferentItem() {
        OrderLine orderLine1 = new OrderLine(1, new Item());
        OrderLine orderLine2 = new OrderLine(1, new Item());

        orderLine2.setItem(new Item());

        assertFalse(orderLine1.equals(orderLine2));
        assertFalse(orderLine2.equals(orderLine1));
    }

    @Test
    void testEquals_NullQuantity() {
        OrderLine orderLine1 = new OrderLine(1, new Item());
        OrderLine orderLine2 = new OrderLine(null, new Item());

        assertFalse(orderLine1.equals(orderLine2));
        assertFalse(orderLine2.equals(orderLine1));
    }

    @Test
    void testEquals_NullItem() {
        OrderLine orderLine1 = new OrderLine(1, new Item());
        OrderLine orderLine2 = new OrderLine(1, null);

        assertFalse(orderLine1.equals(orderLine2));
        assertFalse(orderLine2.equals(orderLine1));
    }
}

```