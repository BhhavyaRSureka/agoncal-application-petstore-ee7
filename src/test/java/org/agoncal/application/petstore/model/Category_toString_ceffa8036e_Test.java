/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro

 You can create test cases for the given method.
Here are some test scenarios that you can use to validate the business logic of the `toString()` method:

**Scenario 1: Null Name**

* **Test Case:**
    * Given a `Customer` object with a `null` name.
    * When calling the `toString()` method on the object.
    * Then the method should return an empty string.

* **Expected Outcome:**
    * The `toString()` method should return an empty string.

**Scenario 2: Empty Name**

* **Test Case:**
    * Given a `Customer` object with an empty string as the name.
    * When calling the `toString()` method on the object.
    * Then the method should return an empty string.

* **Expected Outcome:**
    * The `toString()` method should return an empty string.

**Scenario 3: Valid Name**

* **Test Case:**
    * Given a `Customer` object with a valid name (e.g., "John Doe").
    * When calling the `toString()` method on the object.
    * Then the method should return the name of the customer.

* **Expected Outcome:**
    * The `toString()` method should return "John Doe".

**Scenario 4: Name with Spaces**

* **Test Case:**
    * Given a `Customer` object with a name that contains spaces (e.g., "John Smith").
    * When calling the `toString()` method on the object.
    * Then the method should return the name of the customer, including the spaces.

* **Expected Outcome:**
    * The `toString()` method should return "John Smith".

**Scenario 5: Name with Special Characters**

* **Test Case:**
    * Given a `Customer` object with a name that contains special characters (e.g., "John O'Brien").
    * When calling the `toString()` method on the object.
    * Then the method should return the name of the customer, including the special characters.

* **Expected Outcome:**
    * The `toString()` method should return "John O'Brien".

**Scenario 6: Name with Non-ASCII Characters**

* **Test Case:**
    * Given a `Customer` object with a name that contains non-ASCII characters (e.g., "ÁéãÂ∞èÊòé").
    * When calling the `toString()` method on the object.
    * Then the method should return the name of the customer, encoded in UTF-8.

* **Expected Outcome:**
    * The `toString()` method should return the UTF-8 encoded name of the customer.

**Scenario 7: Name with Emojis**

* **Test Case:**
    * Given a `Customer` object with a name that contains emojis (e.g., "John üëç").
    * When calling the `toString()` method on the object.
    * Then the method should return the name of the customer, including the emojis.

* **Expected Outcome:**
    * The `toString()` method should return "John üëç".
*/
.
```java
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Category {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private int version;

    @NotNull
    @Size(min = 3, max = 50)
    private String name;

    private String description;

    public static final String FIND_BY_NAME = "Category.findByName";
    public static final String FIND_ALL = "Category.findAll";

    public Category() {
    }

    public Category(String name, String description) {
        this.name = name;
        this.description = description;
    }

    public Long getId() {
        return this.id;
    }

    public void setId(final Long id) {
        this.id = id;
    }

    public int getVersion() {
        return this.version;
    