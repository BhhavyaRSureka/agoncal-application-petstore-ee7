/*
Test generated by RoostGPT for test JavaTesting using AI Type Open AI and AI Model gpt-4

1. Scenario: Null Name
   Test whether the function handles `null` values correctly. The `name` variable should be set to `null` and the function should return `null` or an empty string.

2. Scenario: Empty Name
   Test if the function handles an empty string appropriately. The `name` variable should be set to an empty string and the function should return an empty string.

3. Scenario: Non-Empty Name
   Test how the function handles a non-empty string. The `name` variable should be set to a non-empty string and the function should return the same string.

4. Scenario: Name with Special Characters
   Test the function with a name containing special characters (like `@`, `#`, `$`, `%`, `^`, `&`, `*`). The function should return the same string with special characters.

5. Scenario: Name with Spaces
   Test the function with a name containing spaces. The function should return the same string, including the spaces.

6. Scenario: Name with Numeric Values
   Test the function with a name containing numeric values. The function should return the same string, including the numeric values.

7. Scenario: Long Name
   Test the function with a very long name. The name should be longer than the typical size of a string in Java. The function should return the same string, even if it is very long.

8. Scenario: Name with Unicode Characters
   Test the function with a name containing Unicode characters. The function should return the same string, including the Unicode characters.

9. Scenario: Name with Escape Sequences
   Test the function with a name containing escape sequences (like `\n`, `\t`). The function should handle these correctly and return the same string.

10. Scenario: Name with HTML Tags
    Test the function with a name containing HTML tags. The function should return the same string, including the HTML tags.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Category_toString_ceffa8036e_Test {

    @Test
    public void testToStringWithNullName() {
        Category category = new Category();
        category.setName(null);
        assertNull(category.toString());
    }

    @Test
    public void testToStringWithEmptyName() {
        Category category = new Category();
        category.setName("");
        assertEquals("", category.toString());
    }

    @Test
    public void testToStringWithNonEmptyName() {
        Category category = new Category();
        category.setName("NonEmptyName");
        assertEquals("NonEmptyName", category.toString());
    }

    @Test
    public void testToStringWithNameWithSpecialCharacters() {
        Category category = new Category();
        category.setName("@#%&*");
        assertEquals("@#%&*", category.toString());
    }

    @Test
    public void testToStringWithNameWithSpaces() {
        Category category = new Category();
        category.setName("Name With Spaces");
        assertEquals("Name With Spaces", category.toString());
    }

    @Test
    public void testToStringWithNameWithNumericValues() {
        Category category = new Category();
        category.setName("Name123");
        assertEquals("Name123", category.toString());
    }

    @Test
    public void testToStringWithLongName() {
        Category category = new Category();
        category.setName("ThisIsAVeryLongNameWithMoreThanSixtyCharacters");
        assertEquals("ThisIsAVeryLongNameWithMoreThanSixtyCharacters", category.toString());
    }

    @Test
    public void testToStringWithNameWithUnicodeCharacters() {
        Category category = new Category();
        category.setName("Name\u263A");
        assertEquals("Name\u263A", category.toString());
    }

    @Test
    public void testToStringWithNameWithEscapeSequences() {
        Category category = new Category();
        category.setName("Name\n\t");
        assertEquals("Name\n\t", category.toString());
    }

    @Test
    public void testToStringWithNameWithHTMLTags() {
        Category category = new Category();
        category.setName("<b>Name</b>");
        assertEquals("<b>Name</b>", category.toString());
    }
}
