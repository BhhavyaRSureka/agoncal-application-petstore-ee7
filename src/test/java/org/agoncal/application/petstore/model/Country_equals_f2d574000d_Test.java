/*
Test generated by RoostGPT for test JavaTesting using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Positive Test - Equal Objects
- Description: Verify that the equals method correctly identifies two identical Country objects as equal.
- Steps: Create two Country objects with the same isoCode. Call the equals method on the first object, passing in the second object.
- Expected Result: The equals method should return true.

Test Scenario 2: Negative Test - Different Objects
- Description: Verify that the equals method correctly identifies two different Country objects as not equal.
- Steps: Create two Country objects with different isoCodes. Call the equals method on the first object, passing in the second object.
- Expected Result: The equals method should return false.

Test Scenario 3: Negative Test - Null Object
- Description: Verify that the equals method correctly identifies a null object as not equal.
- Steps: Create a Country object. Call the equals method on this object, passing in null.
- Expected Result: The equals method should return false.

Test Scenario 4: Negative Test - Different Class
- Description: Verify that the equals method correctly identifies an object of a different class as not equal.
- Steps: Create a Country object and an object of a different class. Call the equals method on the Country object, passing in the object of a different class.
- Expected Result: The equals method should return false.

Test Scenario 5: Positive Test - Same Object
- Description: Verify that the equals method correctly identifies the same object as equal.
- Steps: Create a Country object. Call the equals method on this object, passing in itself.
- Expected Result: The equals method should return true.

Test Scenario 6: Edge Case - Empty isoCode
- Description: Verify that the equals method correctly handles Country objects with empty isoCodes.
- Steps: Create two Country objects with empty isoCodes. Call the equals method on the first object, passing in the second object.
- Expected Result: The equals method should return true.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Country_equals_f2d574000d_Test {

    @Test
    public void testEqualsPositive() {
        Country country1 = new Country("isoCode1", "name1", "printableName1", "iso31", "numcode1");
        Country country2 = new Country("isoCode1", "name2", "printableName2", "iso32", "numcode2");
        assertTrue(country1.equals(country2));
    }

    @Test
    public void testEqualsNegative() {
        Country country1 = new Country("isoCode1", "name1", "printableName1", "iso31", "numcode1");
        Country country3 = new Country("isoCode3", "name3", "printableName3", "iso33", "numcode3");
        assertFalse(country1.equals(country3));
    }

    @Test
    public void testEqualsNull() {
        Country country1 = new Country("isoCode1", "name1", "printableName1", "iso31", "numcode1");
        assertFalse(country1.equals(null));
    }

    @Test
    public void testEqualsDifferentClass() {
        Country country1 = new Country("isoCode1", "name1", "printableName1", "iso31", "numcode1");
        String differentClassObject = "I am not a country object";
        assertFalse(country1.equals(differentClassObject));
    }

    @Test
    public void testEqualsSameObject() {
        Country country1 = new Country("isoCode1", "name1", "printableName1", "iso31", "numcode1");
        assertTrue(country1.equals(country1));
    }

    @Test
    public void testEqualsEmptyIsoCode() {
        Country country1 = new Country("", "name1", "printableName1", "iso31", "numcode1");
        Country country2 = new Country("", "name2", "printableName2", "iso32", "numcode2");
        assertTrue(country1.equals(country2));
    }
}
