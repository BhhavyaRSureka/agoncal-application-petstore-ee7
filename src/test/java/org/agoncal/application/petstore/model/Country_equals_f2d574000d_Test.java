/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro

 Here are test scenarios for the given code snippet function equals to validate business logic:

**1. Reflexivity:**
   - **Test Scenario**: Check if an object is equal to itself.
   - **Expected Result**: `true`

**2. Symmetry:**
   - **Test Scenario**: Check if `a.equals(b)` implies `b.equals(a)`.
   - **Expected Result**: `true`

**3. Transitivity:**
   - **Test Scenario**: Check if `a.equals(b)` and `b.equals(c)` imply `a.equals(c)`.
   - **Expected Result**: `true`

**4. Non-nullity:**
   - **Test Scenario**: Check if `equals(null)` returns `false`.
   - **Expected Result**: `false`

**5. Correctness of Comparison:**
   - **Test Scenario**: Compare two objects with different `isoCode` values.
   - **Expected Result**: `false`

**6. Correctness of Comparison with Null:**
   - **Test Scenario**: Compare an object with a null `isoCode` value.
   - **Expected Result**: `false`

**7. Correctness of Comparison with Different Classes:**
   - **Test Scenario**: Compare an object with an object of a different class.
   - **Expected Result**: `false`

**8. Correctness of Comparison with the Same `isoCode`:**
   - **Test Scenario**: Compare two objects with the same `isoCode` value.
   - **Expected Result**: `true`

**9. Correctness of Comparison with Different Case:**
   - **Test Scenario**: Compare two objects with `isoCode` values in different cases (e.g., "US" and "us").
   - **Expected Result**: `true`

**10. Correctness of Comparison with Leading and Trailing Whitespace:**
   - **Test Scenario**: Compare two objects with `isoCode` values that have leading and trailing whitespace.
   - **Expected Result**: `true`
*/
import org.junit.Test;
import static org.junit.Assert.*;

class Country_equals_f2d574000d_Test {

    @Test
    public void testEquals() {
        Country country1 = new Country();
        country1.setIsoCode("US");
        Country country2 = new Country();
        country2.setIsoCode("US");
        assertTrue(country1.equals(country2));
    }

    @Test
    public void testNotEquals() {
        Country country1 = new Country();
        country1.setIsoCode("US");
        Country country2 = new Country();
        country2.setIsoCode("CA");
        assertFalse(country1.equals(country2));
    }

    @Test
    public void testEqualsNull() {
        Country country1 = new Country();
        country1.setIsoCode("US");
        assertFalse(country1.equals(null));
    }

    @Test
    public void testEqualsDifferentClass() {
        Country country1 = new Country();
        country1.setIsoCode("US");
        String str = "US";
        assertFalse(country1.equals(str));
    }

    @Test
    public void testHashCode() {
        Country country1 = new Country();
        country1.setIsoCode("US");
        Country country2 = new Country();
        country2.setIsoCode("US");
        assertEquals(country1.hashCode(), country2.hashCode());
    }

    @Test
    public void testToString() {
        Country country = new Country();
        country.setName("United States");
        assertEquals("United States", country.toString());
    }
}
