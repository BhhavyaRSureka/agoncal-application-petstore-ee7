/*
Test generated by RoostGPT for test JavaTesting using AI Type Open AI and AI Model gpt-4

1. Test Scenario: Check the equals method when both "this" and "o" are the same object.
   Expected Result: The method should return true.

2. Test Scenario: Check the equals method when "o" is null.
   Expected Result: The method should return false.

3. Test Scenario: Check the equals method when "o" and "this" are of different classes.
   Expected Result: The method should return false.

4. Test Scenario: Check the equals method when "o" is of the same class but the "name" field is different.
   Expected Result: The method should return false.

5. Test Scenario: Check the equals method when "o" is of the same class but the "description" field is different.
   Expected Result: The method should return false.

6. Test Scenario: Check the equals method when "o" is of the same class and both the "name" and "description" fields are the same.
   Expected Result: The method should return true.

7. Test Scenario: Check the equals method when "o" is of the same class, "name" is the same but "description" is null in one of the objects.
   Expected Result: The method should return false.

8. Test Scenario: Check the equals method when "o" is of the same class, "description" is the same but "name" is null in one of the objects.
   Expected Result: The method should return false.

9. Test Scenario: Check the equals method when both "name" and "description" fields are null in both objects.
   Expected Result: The method should return true.

10. Test Scenario: Check the equals method when "o" is of the same class and both the "name" and "description" fields are empty strings.
    Expected Result: The method should return true.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Item_equals_f2d574000d_Test {

    @Test
    public void testEqualsSameObject() {
        Item item1 = new Item("item1", 10f, "path1", "desc1", new Product());
        assertTrue(item1.equals(item1));
    }

    @Test
    public void testEqualsNullObject() {
        Item item1 = new Item("item1", 10f, "path1", "desc1", new Product());
        assertFalse(item1.equals(null));
    }

    @Test
    public void testEqualsDifferentClass() {
        Item item1 = new Item("item1", 10f, "path1", "desc1", new Product());
        assertFalse(item1.equals(new Product()));
    }

    @Test
    public void testEqualsDifferentName() {
        Item item1 = new Item("item1", 10f, "path1", "desc1", new Product());
        Item item2 = new Item("item2", 10f, "path1", "desc1", new Product());
        assertFalse(item1.equals(item2));
    }

    @Test
    public void testEqualsDifferentDescription() {
        Item item1 = new Item("item1", 10f, "path1", "desc1", new Product());
        Item item2 = new Item("item1", 10f, "path1", "desc2", new Product());
        assertFalse(item1.equals(item2));
    }

    @Test
    public void testEqualsSameNameDescription() {
        Item item1 = new Item("item1", 10f, "path1", "desc1", new Product());
        Item item2 = new Item("item1", 10f, "path1", "desc1", new Product());
        assertTrue(item1.equals(item2));
    }

    @Test
    public void testEqualsNullDescription() {
        Item item1 = new Item("item1", 10f, "path1", null, new Product());
        Item item2 = new Item("item1", 10f, "path1", "desc1", new Product());
        assertFalse(item1.equals(item2));
    }

    @Test
    public void testEqualsNullName() {
        Item item1 = new Item(null, 10f, "path1", "desc1", new Product());
        Item item2 = new Item("item1", 10f, "path1", "desc1", new Product());
        assertFalse(item1.equals(item2));
    }

    @Test
    public void testEqualsNullNameDescription() {
        Item item1 = new Item(null, 10f, "path1", null, new Product());
        Item item2 = new Item(null, 10f, "path1", null, new Product());
        assertTrue(item1.equals(item2));
    }

    @Test
    public void testEqualsEmptyNameDescription() {
        Item item1 = new Item("", 10f, "path1", "", new Product());
        Item item2 = new Item("", 10f, "path1", "", new Product());
        assertTrue(item1.equals(item2));
    }
}
