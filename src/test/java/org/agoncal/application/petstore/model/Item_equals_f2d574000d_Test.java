/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro

 I will provide you with a list of test scenarios to validate the business logic of the equals method in the provided code snippet:

1. **Scenario 1:** Test with the same object reference:
   - Arrange: Create two references to the same Item object.
   - Act: Compare the two objects using the equals method.
   - Assert: Verify that the equals method returns true, indicating that the objects are equal.


2. **Scenario 2:** Test with different object references but identical values:
   - Arrange: Create two different Item objects with the same values for name and description.
   - Act: Compare the two objects using the equals method.
   - Assert: Verify that the equals method returns true, indicating that the objects are equal despite having different references.


3. **Scenario 3:** Test with different names:
   - Arrange: Create two Item objects with different values for the name attribute but the same value for the description attribute.
   - Act: Compare the two objects using the equals method.
   - Assert: Verify that the equals method returns false, indicating that the objects are not equal due to the different names.


4. **Scenario 4:** Test with different descriptions:
   - Arrange: Create two Item objects with the same value for the name attribute but different values for the description attribute.
   - Act: Compare the two objects using the equals method.
   - Assert: Verify that the equals method returns false, indicating that the objects are not equal due to the different descriptions.


5. **Scenario 5:** Test with different values for both name and description:
   - Arrange: Create two Item objects with different values for both the name and description attributes.
   - Act: Compare the two objects using the equals method.
   - Assert: Verify that the equals method returns false, indicating that the objects are not equal due to the different values for both attributes.


6. **Scenario 6:** Test with null values for name and description:
   - Arrange: Create two Item objects with null values for both the name and description attributes.
   - Act: Compare the two objects using the equals method.
   - Assert: Verify that the equals method returns true, indicating that the objects are equal despite having null values for both attributes.


7. **Scenario 7:** Test with one null value and one non-null value for name and description:
   - Arrange: Create two Item objects, one with null values for both the name and description attributes and the other with non-null values.
   - Act: Compare the two objects using the equals method.
   - Assert: Verify that the equals method returns false, indicating that the objects are not equal due to the different values for the attributes.
*/
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;

class Item_equals_f2d574000d_Test {

    @ParameterizedTest
    @MethodSource("provideItemObjects")
    @DisplayName("Testing Item.equals() method with different scenarios")
    void testEquals(Item item1, Item item2, boolean expected) {
        assertEquals(expected, item1.equals(item2));
    }

    private static Stream<Arguments> provideItemObjects() {
        // Scenario 1: Same object reference
        Item item1 = new Item("Item 1", 10.0f, "image1.png", "Description 1", null);
        Item item2 = item1;

        // Scenario 2: Different object references but identical values
        Item item3 = new Item("Item 1", 10.0f, "image1.png", "Description 1", null);
        Item item4 = new Item("Item 1", 10.0f, "image1.png", "Description 1", null);

        // Scenario 3: Different names
        Item item5 = new Item("Item 2", 10.0f, "image1.png", "Description 1", null);
        Item item6 = new Item("Item 1", 10.0f, "image1.png", "Description 1", null);

        // Scenario 4: Different descriptions
        Item item7 = new Item("Item 1", 10.0f, "image1.png", "Description 2", null);
        Item item8 = new Item("Item 1", 10.0f, "image1.png", "Description 1", null);

        // Scenario 5: Different values for both name and description
        Item item9 = new Item("Item 2", 10.0f, "image1.png", "Description 2", null);
        Item item10 = new Item("Item 1", 10.0f, "image1.png", "Description 1", null);

        // Scenario 6: Null values for name and description
        Item item11 = new Item(null, null, null, null, null);
        Item item12 = new Item(null, null, null, null, null);

        // Scenario 7: One null value and one non-null value for name and description
        Item item13 = new Item(null, null, null, null, null);
        Item item14 = new Item("Item 1", 10.0f, "image1.png", "Description 1", null);

        return Stream.of(
                Arguments.of(item1, item2, true),
                Arguments.of(item3, item4, true),
                Arguments.of(item5, item6, false),
                Arguments.of(item7, item8, false),
                Arguments.of(item9, item10, false),
                Arguments.of(item11, item12, true),
                Arguments.of(item13, item14, false)
        );
    }
}
