/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro

 I can help you with the test scenarios for the equals method of the Item class:

**Scenario 1: Identity check**

* Input: Two references to the same Item object
* Expected Output: True

**Scenario 2: Null check**

* Input: One Item object and a null object
* Expected Output: False

**Scenario 3: Class check**

* Input: An Item object and an object of a different class
* Expected Output: False

**Scenario 4: Field comparison**

* Input: Two Item objects with the same name and description
* Expected Output: True

**Scenario 5: Different name**

* Input: Two Item objects with different names
* Expected Output: False

**Scenario 6: Different description**

* Input: Two Item objects with different descriptions
* Expected Output: False

**Scenario 7: Different case**

* Input: Two Item objects with the same name and description, but different case
* Expected Output: True

**Scenario 8: Leading and trailing whitespace**

* Input: Two Item objects with the same name and description, but different leading and trailing whitespace
* Expected Output: True

**Scenario 9: Special characters**

* Input: Two Item objects with the same name and description, but different special characters
* Expected Output: True

**Scenario 10: Null field comparison**

* Input: Two Item objects with one or more null fields
* Expected Output: False
*/
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;
import java.io.Serializable;
import java.util.Objects;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class Item_equals_f2d574000d_Test {

    @Test
    public void test0() throws Throwable {
        Item item0 = new Item();
        Item item1 = new Item();
        boolean result = item0.equals(item1);
        assertTrue(result);
    }

    @Test
    public void test1() throws Throwable {
        Item item0 = mock(Item.class);
        doReturn(null).when(item0).getName();
        Item item1 = mock(Item.class);
        doReturn(null).when(item1).getName();
        boolean result = item0.equals(item1);
        assertTrue(result);
    }

    @Test
    public void test2() throws Throwable {
        Item item0 = mock(Item.class);
        doReturn("").when(item0).getName();
        Item item1 = mock(Item.class);
        doReturn("").when(item1).getName();
        boolean result = item0.equals(item1);
        assertTrue(result);
    }

    @Test
    public void test3() throws Throwable {
        Item item0 = mock(Item.class);
        doReturn("foo").when(item0).getName();
        Item item1 = mock(Item.class);
        doReturn("foo").when(item1).getName();
        boolean result = item0.equals(item1);
        assertTrue(result);
    }

    @Test
    public void test4() throws Throwable {
        Item item0 = mock(Item.class);
        doReturn("foo").when(item0).getName();
        Item item1 = mock(Item.class);
        doReturn("").when(item1).getName();
        boolean result = item0.equals(item1);
        assertFalse(result);
    }

    @Test
    public void test5() throws Throwable {
        Item item0 = mock(Item.class);
        doReturn("foo").when(item0).getName();
        Item item1 = mock(Item.class);
        doReturn(null).when(item1).getName();
        boolean result = item0.equals(item1);
        assertFalse(result);
    }

    @Test
    public void test6() throws Throwable {
        Item item0 = mock(Item.class);
        doReturn(null).when(item0).getName();
        Item item1 = mock(Item.class);
        doReturn("foo").when(item1).getName();
        boolean result = item0.equals(item1);
        assertFalse(result);
    }

    @Test
    public void test7() throws Throwable {
        Item item0 = mock(Item.class);
        doReturn("foo").when(item0).getDescription();
        Item item1 = mock(Item.class);
        doReturn("foo").when(item1).getDescription();
        boolean result = item0.equals(item1);
        assertTrue(result);
    }

    @Test
    public void test8() throws Throwable {
        Item item0 = mock(Item.class);
        doReturn("").when(item0).getDescription();
        Item item1 = mock(Item.class);
        doReturn("").when(item1).getDescription();
        boolean result = item0.equals(item1);
        assertTrue(result);
    }

    @Test
    public void test9() throws Throwable {
        Item item0 = mock(Item.class);
        doReturn("foo").when(item0).getDescription();
        Item item1 = mock(Item.class);
        doReturn("").when(item1).getDescription();
        boolean result = item0.equals(item1);
        assertFalse(result);
    }

    @Test
    public void test10() throws Throwable {
        Item item0 = mock(Item.class);
        doReturn("").when(item0).getDescription();
        Item item1 = mock(Item.class);
        doReturn("foo").when(item1).getDescription();
        boolean result = item0.equals(item1);
        assertFalse(result);
    }

    @Test
    public void test11() throws Throwable {
        Item item0 = mock(Item.class);
        doReturn("foo").when(item0).getDescription();
        Item item1 = mock(Item.class);
        doReturn(null).when(item1).getDescription();
        boolean result = item0.equals(item1);
        assertFalse(result);
    }

    @Test
    public void test12() throws Throwable {
        Item item0 = mock(Item.class);
        doReturn(null).when(item0).getDescription();
        Item item1 = mock(Item.class);
        doReturn("foo").when(item1).getDescription();
        boolean result = item0.equals(item1);
        assertFalse(result);
    }

}
