/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro

 You are going to be writing test cases for the following function:

```
public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Category category = (Category) o;
        return name.equals(category.name);
    }
```
The function `equals` implements the method `equals` of the class `Object`.
This method compares the object with another object and returns true if both objects are equal.
In this case, two objects of the class `Category` are equal if they have the same name.

**Test scenario 1:**

* **Input:** Two objects of the class `Category` with the same name.
* **Expected output:** The method `equals` returns true.

**Test scenario 2:**

* **Input:** Two objects of the class `Category` with different names.
* **Expected output:** The method `equals` returns false.

**Test scenario 3:**

* **Input:** An object of the class `Category` and an object of a different class.
* **Expected output:** The method `equals` returns false.

**Test scenario 4:**

* **Input:** An object of the class `Category` and a null object.
* **Expected output:** The method `equals` returns false.

**Test scenario 5:**

* **Input:** An object of the class `Category` and itself.
* **Expected output:** The method `equals` returns true.

**Test scenario 6:**

* **Input:** Two objects of the class `Category` with the same name but different case.
* **Expected output:** The method `equals` returns true.

**Test scenario 7:**

* **Input:** Two objects of the class `Category` with the same name but different whitespaces.
* **Expected output:** The method `equals` returns true.

**Test scenario 8:**

* **Input:** Two objects of the class `Category` with the same name but different accents.
* **Expected output:** The method `equals` returns true.

**Test scenario 9:**

* **Input:** Two objects of the class `Category` with the same name but different diacritics.
* **Expected output:** The method `equals` returns true.

**Test scenario 10:**

* **Input:** Two objects of the class `Category` with the same name but different punctuation marks.
* **Expected output:** The method `equals` returns true.
*/
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

class Category_equals_f2d574000d_Test {

    @Test
    void testEquals_SameObject() {
        Category category = new Category("Test", "This is a test category");
        assertTrue(category.equals(category));
    }

    @Test
    void testEquals_DifferentObject() {
        Category category1 = new Category("Test", "This is a test category");
        Category category2 = new Category("Test2", "This is another test category");
        assertFalse(category1.equals(category2));
    }

    @Test
    void testEquals_DifferentClass() {
        Category category = new Category("Test", "This is a test category");
        assertFalse(category.equals(new Object()));
    }

    @Test
    void testEquals_Null() {
        Category category = new Category("Test", "This is a test category");
        assertFalse(category.equals(null));
    }

    @ParameterizedTest
    @CsvSource({
            "Test, Test, true",
            "Test, test, true",
            "Test, TEST, true",
            "Test, Test ", true",
            "Test, Test\t", true",
            "Test, Test\n", true",
            "Test, TÃ©st, true",
            "Test, T\u00e9st, true",
            "Test, Test., true",
            "Test, Test!", true"
    })
    void testEquals_DifferentNames(String name1, String name2, boolean expected) {
        Category category1 = new Category(name1, "This is a test category");
        Category category2 = new Category(name2, "This is another test category");
        assertEquals(expected, category1.equals(category2));
    }
}
