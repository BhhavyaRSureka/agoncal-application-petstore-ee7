/*
Test generated by RoostGPT for test JavaTesting using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Null OrderDate and Customer
Check the scenario when both orderDate and customer are null. The hash code should not throw any NullPointerException and should return 0.

Test Scenario 2: Null OrderDate
Check the scenario when orderDate is null but the customer is not null. The hash function should not throw any NullPointerException and should return the hash code of the customer.

Test Scenario 3: Null Customer
Check the scenario when the customer is null but orderDate is not null. The hash function should not throw any NullPointerException and should return the hash code of the orderDate.

Test Scenario 4: Valid OrderDate and Customer
Check the scenario when both orderDate and customer are valid and not null. The hash function should return a unique hash code that is the combination of the hash codes of orderDate and customer.

Test Scenario 5: Same OrderDate and Customer
Check the scenario when two different instances have the same orderDate and customer. The hash function should return the same hash code for both instances.

Test Scenario 6: Different OrderDate and Customer
Check the scenario when two different instances have different orderDate and customer. The hash function should return different hash codes for both instances.

Test Scenario 7: OrderDate and Customer Unchanged Over Time
Check the scenario when the orderDate and customer of an instance do not change over time. The hash function should return the same hash code every time it is called.

Test Scenario 8: Changing OrderDate or Customer
Check the scenario when the orderDate or customer of an instance changes. The hash function should return a different hash code after the change.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.Date;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

public class PurchaseOrder_hashCode_5a2657087a_Test {

    private PurchaseOrder purchaseOrder1, purchaseOrder2;
    private Date date;
    private Customer customer;

    @BeforeEach
    public void setup() {
        date = new Date();
        customer = new Customer();
        purchaseOrder1 = new PurchaseOrder();
        purchaseOrder2 = new PurchaseOrder();
    }

    @Test
    public void testHashCodeWithNullOrderDateAndCustomer() {
        assertEquals(0, purchaseOrder1.hashCode());
    }

    @Test
    public void testHashCodeWithNullOrderDate() {
        purchaseOrder1.setCustomer(customer);
        assertEquals(customer.hashCode(), purchaseOrder1.hashCode());
    }

    @Test
    public void testHashCodeWithNullCustomer() {
        purchaseOrder1.setOrderDate(date);
        assertEquals(date.hashCode(), purchaseOrder1.hashCode());
    }

    @Test
    public void testHashCodeWithValidOrderDateAndCustomer() {
        purchaseOrder1.setOrderDate(date);
        purchaseOrder1.setCustomer(customer);
        assertEquals(Objects.hash(date, customer), purchaseOrder1.hashCode());
    }

    @Test
    public void testHashCodeWithSameOrderDateAndCustomer() {
        purchaseOrder1.setOrderDate(date);
        purchaseOrder1.setCustomer(customer);
        purchaseOrder2.setOrderDate(date);
        purchaseOrder2.setCustomer(customer);
        assertEquals(purchaseOrder1.hashCode(), purchaseOrder2.hashCode());
    }

    @Test
    public void testHashCodeWithDifferentOrderDateAndCustomer() {
        purchaseOrder1.setOrderDate(date);
        purchaseOrder1.setCustomer(customer);
        purchaseOrder2.setOrderDate(new Date(date.getTime() + 1000));
        purchaseOrder2.setCustomer(new Customer());
        assertNotEquals(purchaseOrder1.hashCode(), purchaseOrder2.hashCode());
    }

    @Test
    public void testHashCodeWithOrderDateAndCustomerUnchangedOverTime() {
        purchaseOrder1.setOrderDate(date);
        purchaseOrder1.setCustomer(customer);
        int hashCode1 = purchaseOrder1.hashCode();
        int hashCode2 = purchaseOrder1.hashCode();
        assertEquals(hashCode1, hashCode2);
    }

    @Test
    public void testHashCodeWithChangingOrderDateOrCustomer() {
        purchaseOrder1.setOrderDate(date);
        purchaseOrder1.setCustomer(customer);
        int hashCode1 = purchaseOrder1.hashCode();
        purchaseOrder1.setOrderDate(new Date());
        int hashCode2 = purchaseOrder1.hashCode();
        assertNotEquals(hashCode1, hashCode2);
    }
}
