/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro

 Can you help me write test scenarios for this code snippet function hashCode to validate business logic?

**Test Scenario 1:**

**Test Objective:** Verify that the `hashCode()` method correctly generates a hash code for an object with a non-null name.

**Test Steps:**

1. Create a `Person` object with a non-null name, e.g., `"John Doe"`.
2. Call the `hashCode()` method on the `Person` object and store the result in a variable.
3. Assert that the hash code is not equal to `0`.

**Expected Outcome:**

The hash code should be a non-zero integer.

**Test Scenario 2:**

**Test Objective:** Verify that the `hashCode()` method generates the same hash code for two objects with the same name.

**Test Steps:**

1. Create two `Person` objects with the same name, e.g., `"John Doe"`.
2. Call the `hashCode()` method on both `Person` objects and store the results in variables.
3. Assert that the two hash codes are equal.

**Expected Outcome:**

The two hash codes should be equal.

**Test Scenario 3:**

**Test Objective:** Verify that the `hashCode()` method generates different hash codes for two objects with different names.

**Test Steps:**

1. Create two `Person` objects with different names, e.g., `"John Doe"` and `"Jane Doe"`.
2. Call the `hashCode()` method on both `Person` objects and store the results in variables.
3. Assert that the two hash codes are not equal.

**Expected Outcome:**

The two hash codes should be different.

**Test Scenario 4:**

**Test Objective:** Verify that the `hashCode()` method generates different hash codes for two objects with the same name but different case.

**Test Steps:**

1. Create two `Person` objects with the same name but different case, e.g., `"John Doe"` and `"john doe"`.
2. Call the `hashCode()` method on both `Person` objects and store the results in variables.
3. Assert that the two hash codes are not equal.

**Expected Outcome:**

The two hash codes should be different.

**Test Scenario 5:**

**Test Objective:** Verify that the `hashCode()` method generates different hash codes for two objects with the same name but different spaces.

**Test Steps:**

1. Create two `Person` objects with the same name but different spaces, e.g., `"John Doe"` and `"John  Doe"`.
2. Call the `hashCode()` method on both `Person` objects and store the results in variables.
3. Assert that the two hash codes are not equal.

**Expected Outcome:**

The two hash codes should be different.
*/
               
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;
import java.util.stream.Stream;
import static org.assertj.core.api.Assertions.assertThat;

class CategoryHashCodeTest {

    @ParameterizedTest
    @MethodSource("hashCodeProvider")
    void hashCode_whenCalled_shouldReturnExpectedHashCode(String name, int expectedHashCode) {
        Category category = new Category(name, "description");
        assertThat(category.hashCode()).isEqualTo(expectedHashCode);
    }

    private static Stream<Arguments> hashCodeProvider() {
        return Stream.of(
                Arguments.of("name", "name".hashCode()),
                Arguments.of("Name", "Name".hashCode()),
                Arguments.of("nAmE", "nAmE".hashCode()),
                Arguments.of("name with spaces", "name with spaces".hashCode()),
                Arguments.of("name with special characters", "name with special characters".hashCode())
        );
    }

    @Test
    void hashCode_whenNullName_shouldReturnZero() {
        Category category = new Category(null, "description");
        assertThat(category.hashCode()).isEqualTo(0);
    }
}
              
              