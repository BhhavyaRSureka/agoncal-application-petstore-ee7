/*
Test generated by RoostGPT for test JavaTesting using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Name is Null
- Description: In this scenario, we need to test the behavior of the hashCode function when the name variable is null. According to the Objects.hash() method, it should handle null values without throwing an exception.

Test Scenario 2: Name is Not Null
- Description: In this scenario, we will test the hashCode function when the name variable is not null. The function should compute a hash code value based on the value of the name variable.

Test Scenario 3: Changing Name Value
- Description: This scenario will test if the hash code changes when the value of the name variable changes. If two name variables have different values, their hash codes should be different.

Test Scenario 4: Same Name Value
- Description: In this scenario, we will test if the hash code remains the same when the value of the name variable remains the same. If two name variables have the same value, their hash codes should be the same.

Test Scenario 5: Empty Name Value
- Description: This scenario will check how the hashCode function behaves when the name variable is an empty string. It should return a hash code value specific to an empty string.

Test Scenario 6: Long Name Value
- Description: In this scenario, we will test the performance and correctness of the hashCode function when the name variable is a very long string. The function should still return a valid hash code without any performance issues.

Test Scenario 7: Special Characters in Name
- Description: This scenario will test the hashCode function with a name variable that contains special characters. The function should be able to handle special characters and return a valid hash code.  

Test Scenario 8: Unicode Characters in Name
- Description: This scenario will test the hashCode function with a name variable that contains Unicode characters. The function should be able to handle Unicode characters and return a valid hash code.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.Objects;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

public class Category_hashCode_5a2657087a_Test {

    private Category category;

    @BeforeEach
    public void setup() {
        category = new Category();
    }

    @Test
    public void testNameIsNull() {
        category.setName(null);
        assertEquals(Objects.hash((String) null), category.hashCode());
    }

    @Test
    public void testNameIsNotNull() {
        category.setName("Pet");
        assertEquals(Objects.hash("Pet"), category.hashCode());
    }

    @Test
    public void testChangingNameValue() {
        category.setName("Pet1");
        int oldHashCode = category.hashCode();
        category.setName("Pet2");
        int newHashCode = category.hashCode();
        assertNotEquals(oldHashCode, newHashCode);
    }

    @Test
    public void testSameNameValue() {
        category.setName("Pet");
        int oldHashCode = category.hashCode();
        category.setName("Pet");
        int newHashCode = category.hashCode();
        assertEquals(oldHashCode, newHashCode);
    }

    @Test
    public void testEmptyNameValue() {
        category.setName("");
        assertEquals(Objects.hash(""), category.hashCode());
    }

    @Test
    public void testLongNameValue() {
        String longName = new String(new char[1000]).replace("\0", "a");
        category.setName(longName);
        assertEquals(Objects.hash(longName), category.hashCode());
    }

    @Test
    public void testSpecialCharactersInName() {
        category.setName("!@#$%^&*()_+");
        assertEquals(Objects.hash("!@#$%^&*()_+"), category.hashCode());
    }

    @Test
    public void testUnicodeCharactersInName() {
        category.setName("\u263A");
        assertEquals(Objects.hash("\u263A"), category.hashCode());
    }
}
