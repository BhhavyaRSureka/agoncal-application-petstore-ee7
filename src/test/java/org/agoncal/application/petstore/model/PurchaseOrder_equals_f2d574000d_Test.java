/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro

 You need to provide test scenarios to validate the equals method of the PurchaseOrder class. The provided code compares two PurchaseOrder objects for equality based on their orderDate and customer fields.

**Test Scenario 1:**
* **Input:** Two PurchaseOrder objects with the same orderDate and customer.
* **Expected Output:** The equals method should return true.

**Test Scenario 2:**
* **Input:** Two PurchaseOrder objects with different orderDate but the same customer.
* **Expected Output:** The equals method should return false.

**Test Scenario 3:**
* **Input:** Two PurchaseOrder objects with the same orderDate but different customers.
* **Expected Output:** The equals method should return false.

**Test Scenario 4:**
* **Input:** A PurchaseOrder object and an object of a different class.
* **Expected Output:** The equals method should return false.

**Test Scenario 5:**
* **Input:** Two PurchaseOrder objects with null orderDate or customer fields.
* **Expected Output:** The equals method should return false.

**Test Scenario 6:**
* **Input:** Two PurchaseOrder objects with the same orderDate and customer, but different additional fields (such as purchaseOrderNumber, items, or totalAmount).
* **Expected Output:** The equals method should return true, as the additional fields are not considered for equality comparison.

**Test Scenario 7:**
* **Input:** A PurchaseOrder object and a null object.
* **Expected Output:** The equals method should return false.

**Test Scenario 8:**
* **Input:** Two PurchaseOrder objects with the same orderDate and customer, but different hashCode values.
* **Expected Output:** The equals method should still return true, as the hashCode method is not used for equality comparison.
*/

              - Do not write any comments.
              - Write code in a single line as much as possible.
              - The code should be as short as possible.
              - Do not generate the main method.
              - Do not write the package statement.
import javax.persistence.*;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

@Entity
@Table(name = "orders")
@XmlRootElement
public class PurchaseOrder implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Version
    private int version;

    @Temporal(TemporalType.TIMESTAMP)
    private Date orderDate;

    private Float totalWithoutVat;

    private Float vatRate;

    private Float vat;

    private Float totalWithVat;

    private Float discountRate;

    private Float discount;

    private Float total;

    @Valid
    @ManyToOne
    private Customer customer;

    @OneToMany(mappedBy = "order", cascade = CascadeType.ALL)
    private Set<OrderLine> orderLines = new HashSet<>();

    @Embedded
    private Address deliveryAddress = new Address();

    @Embedded
    private CreditCard creditCard = new CreditCard();

    public static final String FIND_ALL = "Order.findAll";

    public PurchaseOrder() {
        setDefaultData();
    }

    private void setDefaultData() {
        orderDate = new Date();
    }

    public Long getId() {
        return this.id;
    }

    public void setId(final Long id) {
        this.id = id;
    }

    public int getVersion() {
        return this.version;
    }

    public void setVersion(final int version) {
        this.version = version;
    }

    public Date getOrderDate() {
        return orderDate;
    }

    public void setOrderDate(Date orderDate) {
        this.orderDate = orderDate;
    }

    public Float getTotalWithoutVat() {
        return totalWithoutVat;
    }

    public void setTotalWithoutVat(Float totalWithoutVat) {
        this.totalWithoutVat = totalWithoutVat;
    }

    public Float getVatRate() {
        return vatRate;
    }

    public void setVatRate(Float vatRate) {
        this.vatRate = vatRate;
    }

    public Float getVat() {
        return vat;
    }

    public void setVat(Float vat) {
        this.vat = vat;
    }

    public Float getTotalWithVat() {
        return totalWithVat;
    }

    public void setTotalWithVat(Float totalWithVat) {
        this.totalWithVat = totalWithVat;
    }

    public Float getDiscountRate() {
        return discountRate;
    }

    public void setDiscountRate(Float discountRate) {
        this.discountRate = discountRate;
    }

    public Float getDiscount() {
        return discount;
    }

    public void setDiscount(Float discount) {
        this.discount = discount;
    }

    public Float getTotal() {
        return total;
    }

    public void setTotal(Float total) {
        this.total = total;
    }

    public Customer getCustomer() {
        return this.customer;
    }

    public void setCustomer(final Customer customer) {
        this.customer = customer;
    }

    public Set<OrderLine> getOrderLines() {
        return this.orderLines;
    }

    public void setOrderLines(final Set<OrderLine> orderLines) {
        this.orderLines = orderLines;
    }

    public Address getDeliveryAddress() {
        return deliveryAddress;
    }

    public void setDeliveryAddress(Address deliveryAddress) {
        this.deliveryAddress = deliveryAddress;
    }

    public CreditCard getCreditCard() {
        return creditCard;
    }

    public void setCreditCard(CreditCard creditCard) {
        this.creditCard = creditCard;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o)
            return true;
        if (o == null || getClass() != o.getClass())
            return false;
        PurchaseOrder that = (PurchaseOrder) o;
        return orderDate.equals(that.orderDate) && customer.equals(that.customer);
    }

    @Override
    public int hashCode() {
        return Objects.hash(orderDate, customer);
    }

    @Override
    public String toString() {
        return "PurchaseOrder{" + "id=" + id + ", version=" + version + ", orderDate=" + orderDate + ", totalWithoutVat=" + totalWithoutVat + ", vatRate=" + vatRate + ", vat=" + vat + ", totalWithVat=" + totalWithVat + ", discountRate=" + discountRate + ", discount=" + discount + ", total=" + total + ", customer=" + customer + ", orderLines=" + orderLines + ", deliveryAddress=" + deliveryAddress + ", creditCard=" + creditCard + '}';
    }
}
```