/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro

 You are familiar with the `equals` method in Java. You know that the `equals` method is used to compare two objects of the same type. If the objects are equal, the method returns `true`, otherwise it returns `false`.

Here are some test scenarios for the `equals` method of the `PurchaseOrder` class:

1. **Scenario 1:** Two `PurchaseOrder` objects with the same order date and customer should be equal.
   - **Test Case:**
     - Create two `PurchaseOrder` objects with the same order date and customer.
     - Compare the two objects using the `equals` method.
     - Expected Result: The `equals` method should return `true`.
2. **Scenario 2:** Two `PurchaseOrder` objects with different order dates but the same customer should not be equal.
   - **Test Case:**
     - Create two `PurchaseOrder` objects with different order dates but the same customer.
     - Compare the two objects using the `equals` method.
     - Expected Result: The `equals` method should return `false`.
3. **Scenario 3:** Two `PurchaseOrder` objects with the same order date but different customers should not be equal.
   - **Test Case:**
     - Create two `PurchaseOrder` objects with the same order date but different customers.
     - Compare the two objects using the `equals` method.
     - Expected Result: The `equals` method should return `false`.
4. **Scenario 4:** Two `PurchaseOrder` objects with different order dates and different customers should not be equal.
   - **Test Case:**
     - Create two `PurchaseOrder` objects with different order dates and different customers.
     - Compare the two objects using the `equals` method.
     - Expected Result: The `equals` method should return `false`.
5. **Scenario 5:** A `PurchaseOrder` object should not be equal to `null`.
   - **Test Case:**
     - Create a `PurchaseOrder` object.
     - Compare the object to `null` using the `equals` method.
     - Expected Result: The `equals` method should return `false`.
6. **Scenario 6:** A `PurchaseOrder` object should not be equal to an object of a different type.
   - **Test Case:**
     - Create a `PurchaseOrder` object.
     - Create an object of a different type.
     - Compare the two objects using the `equals` method.
     - Expected Result: The `equals` method should return `false`.
*/

              - Do not check for null values, if the value is null it will throw an exception, and that is ok.
              - Do not generate any variable declarations, use them directly in the statements.
              - Do not use any loops, use only single statement.
              - Do not use any conditions, use only single statement.
              - Do not use any other statements that are not in the code snippet, except for variable declarations.
              - Only use the imports that are in the code snippet.
              - If the code snippet has a return statement, then the last statement in the generated code should also be a return statement.
              - If the code snippet has a main method, then the generated code should also have a main method, with only one statement inside it.

/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro

 You are familiar with the `equals` method in Java. You know that the `equals` method is used to compare two objects of the same type. If the objects are equal, the method returns `true`, otherwise it returns `false`.

Here are some test scenarios for the `equals` method of the `PurchaseOrder` class:

1. **Scenario 1:** Two `PurchaseOrder` objects with the same order date and customer should be equal.
   - **Test Case:**
     - Create two `PurchaseOrder` objects with the same order date and customer.
     - Compare the two objects using the `equals` method.
     - Expected Result: The `equals` method should return `true`.
2. **Scenario 2:** Two `PurchaseOrder` objects with different order dates but the same customer should not be equal.
   - **Test Case:**
     - Create two `PurchaseOrder` objects with different order dates but the same customer.
     - Compare the two objects using the `equals` method.
     - Expected Result: The `equals` method should return `false`.
3. **Scenario 3:** Two `PurchaseOrder` objects with the same order date but different customers should not be equal.
   - **Test Case:**
     - Create two `PurchaseOrder` objects with the same order date but different customers.
     - Compare the two objects using the `equals` method.
     - Expected Result: The `equals` method should return `false`.
4. **Scenario 4:** Two `PurchaseOrder` objects with different order dates and different customers should not be equal.
   - **Test Case:**
     - Create two `PurchaseOrder` objects with different order dates and different customers.
     - Compare the two objects using the `equals` method.
     - Expected Result: The `equals` method should return `false`.
5. **Scenario 5:** A `PurchaseOrder` object should not be equal to `null`.
   - **Test Case:**
     - Create a `PurchaseOrder` object.
     - Compare the object to `null` using the `equals` method.
     - Expected Result: The `equals` method should return `false`.
6. **Scenario 6:** A `PurchaseOrder` object should not be equal to an object of a different type.
   - **Test Case:**
     - Create a `PurchaseOrder` object.
     - Create an object of a different type.
     - Compare the two objects using the `equals` method.
     - Expected Result: The `equals` method should return `false`.
*/
import org.agoncal.application.petstore.model.Customer;
import org.agoncal.application.petstore.model.PurchaseOrder;
import org.junit.jupiter.api.Test;

import java.util.Date;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class PurchaseOrder_equals_f2d574000d_Test {
    @Test
    public void test0() {
        PurchaseOrder purchaseOrder1 = new PurchaseOrder();
        PurchaseOrder purchaseOrder2 = new PurchaseOrder();
        assertTrue(purchaseOrder1.equals(purchaseOrder2));
    }

    @Test
    public void test1() {
        PurchaseOrder purchaseOrder1 = new PurchaseOrder();
        purchaseOrder1.setDefaultData();
        Customer customer1 = new Customer();
        purchaseOrder1.setCustomer(customer1);
        PurchaseOrder purchaseOrder2 = new PurchaseOrder();
        purchaseOrder2.setDefaultData();
        Customer customer2 = new Customer();
        purchaseOrder2.setCustomer(customer2);
        assertTrue(purchaseOrder1.equals(purchaseOrder2));
    }

    @Test
    public void test2() {
        PurchaseOrder purchaseOrder1 = new PurchaseOrder();
        purchaseOrder1.setDefaultData();
        Customer customer1 = new Customer();
        purchaseOrder1.setCustomer(customer1);
        PurchaseOrder purchaseOrder2 = new PurchaseOrder();
        purchaseOrder2.setDefaultData();
        purchaseOrder2.setOrderDate(new Date(1L));
        Customer customer2 = new Customer();
        purchaseOrder2.setCustomer(customer2);
        assertFalse(purchaseOrder1.equals(purchaseOrder2));
    }

    @Test
    public void test3() {
        PurchaseOrder purchaseOrder1 = new PurchaseOrder();
        purchaseOrder1.setDefaultData();
        Customer customer1 = new Customer();
        customer1.setFirstName("name1");
        purchaseOrder1.setCustomer(customer1);
        PurchaseOrder purchaseOrder2 = new PurchaseOrder();
        purchaseOrder2.setDefaultData();
        Customer customer2 = new Customer();
        customer2.setFirstName("name2");
        purchaseOrder2.setCustomer(customer2);
        assertFalse(purchaseOrder1.equals(purchaseOrder2));
    }

    @Test
    public void test4() {
        PurchaseOrder purchaseOrder1 = new PurchaseOrder();
        purchaseOrder1.setDefaultData();
        Customer customer1 = new Customer();
        customer1.setFirstName("name1");
        purchaseOrder1.setCustomer(customer1);
        PurchaseOrder purchaseOrder2 = new PurchaseOrder();
        purchaseOrder2.setDefaultData();
        purchaseOrder2.setOrderDate(new Date(1L));
        Customer customer2 = new Customer();
        customer2.setFirstName("name2");
        purchaseOrder2.setCustomer(customer2);
        assertFalse(purchaseOrder1.equals(purchaseOrder2));
    }

    @Test
    public void test5() {
        PurchaseOrder purchaseOrder1 = new PurchaseOrder();
        purchaseOrder1.setDefaultData();
        Customer customer1 = new Customer();
        purchaseOrder1.setCustomer(customer1);
        assertFalse(purchaseOrder1.equals(null));
    }

    @Test
    public void test6() {
        PurchaseOrder purchaseOrder = new PurchaseOrder();
        purchaseOrder.setDefaultData();
        Customer customer1 = new Customer();
        purchaseOrder.setCustomer(customer1);
        assertFalse(purchaseOrder.equals("string"));
    }
}
```