/*
Test generated by RoostGPT for test JavaTesting using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the object is equal to itself
   Given an instance of PurchaseOrder
   When the equals method is called with itself as the argument
   Then the result should be true

2. Scenario: Check if the object is equal to null
   Given an instance of PurchaseOrder
   When the equals method is called with null as the argument
   Then the result should be false

3. Scenario: Check if the object is equal to an object of a different class
   Given an instance of PurchaseOrder
   When the equals method is called with an instance of a different class as the argument
   Then the result should be false

4. Scenario: Check if two different PurchaseOrder objects with the same orderDate and customer are equal
   Given two different instances of PurchaseOrder with the same orderDate and customer
   When the equals method is called with one instance as the argument 
   Then the result should be true

5. Scenario: Check if two different PurchaseOrder objects with different orderDates but the same customer are not equal
   Given two different instances of PurchaseOrder with different orderDates but the same customer
   When the equals method is called with one instance as the argument 
   Then the result should be false

6. Scenario: Check if two different PurchaseOrder objects with the same orderDate but different customers are not equal
   Given two different instances of PurchaseOrder with the same orderDate but different customers
   When the equals method is called with one instance as the argument 
   Then the result should be false

7. Scenario: Check if two different PurchaseOrder objects with different orderDates and customers are not equal
   Given two different instances of PurchaseOrder with different orderDates and customers
   When the equals method is called with one instance as the argument 
   Then the result should be false
*/
package org.agoncal.application.petstore.model;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import java.util.Date;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class PurchaseOrder_equals_f2d574000d_Test {

    private PurchaseOrder purchaseOrder1;
    private PurchaseOrder purchaseOrder2;
    private Date date;
    private Customer customer;

    @Before
    public void setUp() {
        date = new Date();
        customer = new Customer();
        purchaseOrder1 = new PurchaseOrder();
        purchaseOrder1.setOrderDate(date);
        purchaseOrder1.setCustomer(customer);
        purchaseOrder2 = new PurchaseOrder();
    }

    @Test
    public void testEquals_sameObject() {
        assertTrue(purchaseOrder1.equals(purchaseOrder1));
    }

    @Test
    public void testEquals_nullObject() {
        assertFalse(purchaseOrder1.equals(null));
    }

    @Test
    public void testEquals_differentClass() {
        assertFalse(purchaseOrder1.equals(new String()));
    }

    @Test
    public void testEquals_sameOrderDateAndCustomer() {
        purchaseOrder2.setOrderDate(date);
        purchaseOrder2.setCustomer(customer);
        assertTrue(purchaseOrder1.equals(purchaseOrder2));
    }

    @Test
    public void testEquals_differentOrderDatesSameCustomer() {
        purchaseOrder2.setOrderDate(new Date());
        purchaseOrder2.setCustomer(customer);
        assertFalse(purchaseOrder1.equals(purchaseOrder2));
    }

    @Test
    public void testEquals_sameOrderDateDifferentCustomers() {
        purchaseOrder2.setOrderDate(date);
        purchaseOrder2.setCustomer(new Customer());
        assertFalse(purchaseOrder1.equals(purchaseOrder2));
    }

    @Test
    public void testEquals_differentOrderDatesAndCustomers() {
        purchaseOrder2.setOrderDate(new Date());
        purchaseOrder2.setCustomer(new Customer());
        assertFalse(purchaseOrder1.equals(purchaseOrder2));
    }
}
