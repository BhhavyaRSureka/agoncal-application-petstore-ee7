/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro

 You have been asked to write test scenarios for the equals method of the Product class to validate its business logic. Here are some test scenarios that you can use:

Test Scenario 1:
Input:
* Two Product objects with the same name and description.

Expected Output:
* The equals method should return true.

Test Scenario 2:
Input:
* Two Product objects with different names and the same description.

Expected Output:
* The equals method should return false.

Test Scenario 3:
Input:
* Two Product objects with the same name and different descriptions.

Expected Output:
* The equals method should return false.

Test Scenario 4:
Input:
* Two Product objects with different names and descriptions.

Expected Output:
* The equals method should return false.

Test Scenario 5:
Input:
* A Product object and a non-Product object.

Expected Output:
* The equals method should return false.

Test Scenario 6:
Input:
* A Product object and a null object.

Expected Output:
* The equals method should return false.

Test Scenario 7:
Input:
* A Product object and itself.

Expected Output:
* The equals method should return true.
*/
import org.junit.jupiter.api.*;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

class Product_equals_f2d574000d_Test {

    private static Stream<Arguments> provideProductObjects() {
        return Stream.of(
                Arguments.of(
                        new Product("Product 1", "Description 1", null),
                        new Product("Product 1", "Description 1", null),
                        true),
                Arguments.of(
                        new Product("Product 1", "Description 1", null),
                        new Product("Product 2", "Description 1", null),
                        false),
                Arguments.of(
                        new Product("Product 1", "Description 1", null),
                        new Product("Product 1", "Description 2", null),
                        false),
                Arguments.of(
                        new Product("Product 1", "Description 1", null),
                        new Product("Product 2", "Description 2", null),
                        false),
                Arguments.of(
                        new Product("Product 1", "Description 1", null),
                        new Object(),
                        false),
                Arguments.of(
                        new Product("Product 1", "Description 1", null),
                        null,
                        false),
                Arguments.of(
                        new Product("Product 1", "Description 1", null),
                        new Product("Product 1", "Description 1", null),
                        true)
        );
    }

    @ParameterizedTest
    @MethodSource("provideProductObjects")
    void testEquals(Product product1, Object product2, boolean expectedResult) {
        assertEquals(expectedResult, product1.equals(product2));
    }
}
