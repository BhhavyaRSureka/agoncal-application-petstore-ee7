/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro

 I can help you write test scenarios for the code snippet function equals to validate business logic.

**Test Scenario 1:**
* **Input**: Two Address objects with the same street1, city, and zipcode.
* **Expected Output**: The equals method should return true.

**Test Scenario 2:**
* **Input**: Two Address objects with different street1 values.
* **Expected Output**: The equals method should return false.

**Test Scenario 3:**
* **Input**: Two Address objects with different city values.
* **Expected Output**: The equals method should return false.

**Test Scenario 4:**
* **Input**: Two Address objects with different zipcode values.
* **Expected Output**: The equals method should return false.

**Test Scenario 5:**
* **Input**: Two Address objects with different street1, city, and zipcode values.
* **Expected Output**: The equals method should return false.

**Test Scenario 6:**
* **Input**: An Address object and a null object.
* **Expected Output**: The equals method should return false.

**Test Scenario 7:**
* **Input**: An Address object and an object of a different class.
* **Expected Output**: The equals method should return false.
*/
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

class Address_equals_f2d574000d_Test {
    // Test scenario 1: Two Address objects with the same street1, city, and zipcode.
    @Test
    @DisplayName("Equals method should return true for two Address objects with the same street1, city, and zipcode.")
    void testEquals_SameAddress() {
        Address address1 = new Address("123 Main Street", "Anytown", "12345", new Country());
        Address address2 = new Address("123 Main Street", "Anytown", "12345", new Country());

        assertTrue(address1.equals(address2));
    }

    // Test scenario 2: Two Address objects with different street1 values.
    @Test
    @DisplayName("Equals method should return false for two Address objects with different street1 values.")
    void testEquals_DifferentStreet1() {
        Address address1 = new Address("123 Main Street", "Anytown", "12345", new Country());
        Address address2 = new Address("456 Elm Street", "Anytown", "12345", new Country());

        assertFalse(address1.equals(address2));
    }

    // Test scenario 3: Two Address objects with different city values.
    @Test
    @DisplayName("Equals method should return false for two Address objects with different city values.")
    void testEquals_DifferentCity() {
        Address address1 = new Address("123 Main Street", "Anytown", "12345", new Country());
        Address address2 = new Address("123 Main Street", "Springfield", "12345", new Country());

        assertFalse(address1.equals(address2));
    }

    // Test scenario 4: Two Address objects with different zipcode values.
    @Test
    @DisplayName("Equals method should return false for two Address objects with different zipcode values.")
    void testEquals_DifferentZipcode() {
        Address address1 = new Address("123 Main Street", "Anytown", "12345", new Country());
        Address address2 = new Address("123 Main Street", "Anytown", "98765", new Country());

        assertFalse(address1.equals(address2));
    }

    // Test scenario 5: Two Address objects with different street1, city, and zipcode values.
    @Test
    @DisplayName("Equals method should return false for two Address objects with different street1, city, and zipcode values.")
    void testEquals_DifferentAll() {
        Address address1 = new Address("123 Main Street", "Anytown", "12345", new Country());
        Address address2 = new Address("456 Elm Street", "Springfield", "98765", new Country());

        assertFalse(address1.equals(address2));
    }

    // Test scenario 6: An Address object and a null object.
    @Test
    @DisplayName("Equals method should return false for an Address object and a null object.")
    void testEquals_NullObject() {
        Address address = new Address("123 Main Street", "Anytown", "12345", new Country());

        assertFalse(address.equals(null));
    }

    // Test scenario 7: An Address object and an object of a different class.
    @Test
    @DisplayName("Equals method should return false for an Address object and an object of a different class.")
    void testEquals_DifferentClass() {
        Address address = new Address("123 Main Street", "Anytown", "12345", new Country());
        String str = "Hello World";

        assertFalse(address.equals(str));
    }
}
