/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro

 However, your test scenarios are not specific enough to validate the business logic of function equals. Here are some test scenarios to validate the business logic:

1. **Scenario 1:**
   - **Objective:** Test if the function equals returns true when two addresses have the same street1, city, and zipcode.
   - **Test Steps:**
     1. Create two Address objects with the same street1, city, and zipcode.
     2. Call the equals method on one of the objects, passing the other object as the argument.
     3. Assert that the result of the equals method is true.

2. **Scenario 2:**
   - **Objective:** Test if the function equals returns false when two addresses have different street1, city, or zipcode.
   - **Test Steps:**
     1. Create two Address objects with different street1, city, or zipcode.
     2. Call the equals method on one of the objects, passing the other object as the argument.
     3. Assert that the result of the equals method is false.

3. **Scenario 3:**
   - **Objective:** Test if the function equals returns false when one of the objects is null.
   - **Test Steps:**
     1. Create an Address object.
     2. Call the equals method on the object, passing null as the argument.
     3. Assert that the result of the equals method is false.

4. **Scenario 4:**
   - **Objective:** Test if the function equals returns false when the class of the objects is different.
   - **Test Steps:**
     1. Create an Address object.
     2. Create an object of a different class.
     3. Call the equals method on the Address object, passing the other object as the argument.
     4. Assert that the result of the equals method is false.

5. **Scenario 5:**
   - **Objective:** Test if the function equals returns true when two addresses have the same street1, city, and zipcode, even if the objects are created in different ways.
   - **Test Steps:**
     1. Create two Address objects with the same street1, city, and zipcode, but using different constructors.
     2. Call the equals method on one of the objects, passing the other object as the argument.
     3. Assert that the result of the equals method is true.

These test scenarios will help you to validate the business logic of the function equals in a more comprehensive way.
*/
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

@ExtendWith(MockitoExtension.class)
public class Address_equals_f2d574000d_Test {

    @Test
    public void testEquals_SameObject() {
        Address address1 = new Address("123 Main St", "Anytown", "CA", "91234", new Country("US", "United States", "USA", "840"));
        assertTrue(address1.equals(address1));
    }

    @Test
    public void testEquals_DifferentObjectsSameValues() {
        Address address1 = new Address("123 Main St", "Anytown", "CA", "91234", new Country("US", "United States", "USA", "840"));
        Address address2 = new Address("123 Main St", "Anytown", "CA", "91234", new Country("US", "United States", "USA", "840"));
        assertTrue(address1.equals(address2));
    }

    @Test
    public void testEquals_DifferentObjectsDifferentValues() {
        Address address1 = new Address("123 Main St", "Anytown", "CA", "91234", new Country("US", "United States", "USA", "840"));
        Address address2 = new Address("456 Elm St", "Springfield", "MO", "65432", new Country("CA", "Canada", "CAN", "124"));
        assertFalse(address1.equals(address2));
    }

    @Test
    public void testEquals_OneObjectNull() {
        Address address1 = new Address("123 Main St", "Anytown", "CA", "91234", new Country("US", "United States", "USA", "840"));
        assertFalse(address1.equals(null));
    }

    @Test
    public void testEquals_DifferentClasses() {
        Address address1 = new Address("123 Main St", "Anytown", "CA", "91234", new Country("US", "United States", "USA", "840"));
        String string1 = "Hello World";
        assertFalse(address1.equals(string1));
    }

    @Test
    public void testEquals_DifferentStreet1() {
        Address address1 = new Address("123 Main St", "Anytown", "CA", "91234", new Country("US", "United States", "USA", "840"));
        Address address2 = new Address("456 Elm St", "Anytown", "CA", "91234", new Country("US", "United States", "USA", "840"));
        assertFalse(address1.equals(address2));
    }

    @Test
    public void testEquals_DifferentCity() {
        Address address1 = new Address("123 Main St", "Anytown", "CA", "91234", new Country("US", "United States", "USA", "840"));
        Address address2 = new Address("123 Main St", "Springfield", "CA", "91234", new Country("US", "United States", "USA", "840"));
        assertFalse(address1.equals(address2));
    }

    @Test
    public void testEquals_DifferentState() {
        Address address1 = new Address("123 Main St", "Anytown", "CA", "91234", new Country("US", "United States", "USA", "840"));
        Address address2 = new Address("123 Main St", "Anytown", "MO", "91234", new Country("US", "United States", "USA", "840"));
        assertFalse(address1.equals(address2));
    }

    @Test
    public void testEquals_DifferentZipcode() {
        Address address1 = new Address("123 Main St", "Anytown", "CA", "91234", new Country("US", "United States", "USA", "840"));
        Address address2 = new Address("123 Main St", "Anytown", "CA", "65432", new Country("US", "United States", "USA", "840"));
        assertFalse(address1.equals(address2));
    }

    @Test
    public void testEquals_DifferentCountry() {
        Address address1 = new Address("123 Main St", "Anytown", "CA", "91234", new Country("US", "United States", "USA", "840"));
        Address address2 = new Address("123 Main St", "Anytown", "CA", "91234", new Country("CA", "Canada", "CAN", "124"));
        assertFalse(address1.equals(address2));
    }
}
