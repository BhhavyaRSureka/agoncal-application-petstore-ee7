/*
Test generated by RoostGPT for test JavaTesting using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Validating the hashCode function with valid inputs
- Given: a valid 'quantity' and 'item' object
- When: the hashCode function is called
- Then: it should return a unique hashCode for the provided inputs

Test Scenario 2: Validating the hashCode function with null inputs
- Given: 'quantity' and 'item' object are null
- When: the hashCode function is called
- Then: it should return a hashCode of 0

Test Scenario 3: Validating the hashCode function with same inputs
- Given: two sets of 'quantity' and 'item' objects with the same values 
- When: the hashCode function is called for both sets
- Then: it should return the same hashCode

Test Scenario 4: Validating the hashCode function with different inputs
- Given: two sets of 'quantity' and 'item' objects with different values 
- When: the hashCode function is called for both sets
- Then: it should return different hashCodes

Test Scenario 5: Validating the hashCode function with 'quantity' as null and 'item' as valid
- Given: 'quantity' is null and 'item' object is valid
- When: the hashCode function is called
- Then: it should return a unique hashCode for the provided inputs

Test Scenario 6: Validating the hashCode function with 'quantity' as valid and 'item' as null
- Given: 'quantity' is valid and 'item' object is null
- When: the hashCode function is called
- Then: it should return a unique hashCode for the provided inputs

Test Scenario 7: Validating the hashCode function with 'quantity' as 0 and 'item' as valid
- Given: 'quantity' is 0 and 'item' object is valid
- When: the hashCode function is called
- Then: it should return a unique hashCode for the provided inputs

Test Scenario 8: Validating the hashCode function with 'quantity' as valid and 'item' as empty
- Given: 'quantity' is valid and 'item' object is empty
- When: the hashCode function is called
- Then: it should return a unique hashCode for the provided inputs
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

public class OrderLine_hashCode_5a2657087a_Test {

    @Test
    public void testHashCode_validInputs() {
        Integer quantity = 5;
        Item item = new Item("Item1", 10f, "imagePath", "description", null);
        OrderLine orderLine = new OrderLine(quantity, item);
        int expected = Objects.hash(quantity, item);
        assertEquals(expected, orderLine.hashCode());
    }

    @Test
    public void testHashCode_nullInputs() {
        OrderLine orderLine = new OrderLine();
        int expected = Objects.hash(null, null);
        assertEquals(expected, orderLine.hashCode());
    }

    @Test
    public void testHashCode_sameInputs() {
        Integer quantity = 5;
        Item item = new Item("Item1", 10f, "imagePath", "description", null);
        OrderLine orderLine1 = new OrderLine(quantity, item);
        OrderLine orderLine2 = new OrderLine(quantity, item);
        assertEquals(orderLine1.hashCode(), orderLine2.hashCode());
    }

    @Test
    public void testHashCode_differentInputs() {
        OrderLine orderLine1 = new OrderLine(5, new Item("Item1", 10f, "imagePath", "description", null));
        OrderLine orderLine2 = new OrderLine(10, new Item("Item2", 20f, "imagePath2", "description2", null));
        assertNotEquals(orderLine1.hashCode(), orderLine2.hashCode());
    }

    @Test
    public void testHashCode_nullQuantity_validItem() {
        Item item = new Item("Item1", 10f, "imagePath", "description", null);
        OrderLine orderLine = new OrderLine(null, item);
        int expected = Objects.hash(null, item);
        assertEquals(expected, orderLine.hashCode());
    }

    @Test
    public void testHashCode_validQuantity_nullItem() {
        Integer quantity = 5;
        OrderLine orderLine = new OrderLine(quantity, null);
        int expected = Objects.hash(quantity, null);
        assertEquals(expected, orderLine.hashCode());
    }

    @Test
    public void testHashCode_zeroQuantity_validItem() {
        Integer quantity = 0;
        Item item = new Item("Item1", 10f, "imagePath", "description", null);
        OrderLine orderLine = new OrderLine(quantity, item);
        int expected = Objects.hash(quantity, item);
        assertEquals(expected, orderLine.hashCode());
    }

    @Test
    public void testHashCode_validQuantity_emptyItem() {
        Integer quantity = 5;
        Item item = new Item();
        OrderLine orderLine = new OrderLine(quantity, item);
        int expected = Objects.hash(quantity, item);
        assertEquals(expected, orderLine.hashCode());
    }
}
