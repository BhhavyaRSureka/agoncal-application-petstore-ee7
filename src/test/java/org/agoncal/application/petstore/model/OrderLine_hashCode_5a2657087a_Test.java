/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro

 You are asked to write test scenarios for the given code snippet `hashCode` to validate the business logic. The `hashCode` method is part of the `java.lang.Object` class and is used to generate a hash code for an object. The hash code is a unique identifier for an object and is used for various purposes, such as storing objects in hash tables and sets.

Here are some test scenarios that you can use to validate the business logic of the `hashCode` method in the provided code snippet:

**Scenario 1:**

**Objective:** Verify that the `hashCode` method generates the same hash code for two objects with the same values for `quantity` and `item`.

**Test Steps:**

1. Create two objects with the same values for `quantity` and `item`.
2. Call the `hashCode` method on both objects.
3. Compare the hash codes generated by the two objects.

**Expected Result:** The hash codes generated by the two objects should be the same.

**Scenario 2:**

**Objective:** Verify that the `hashCode` method generates different hash codes for two objects with different values for `quantity` or `item`.

**Test Steps:**

1. Create two objects with different values for `quantity` or `item`.
2. Call the `hashCode` method on both objects.
3. Compare the hash codes generated by the two objects.

**Expected Result:** The hash codes generated by the two objects should be different.

**Scenario 3:**

**Objective:** Verify that the `hashCode` method generates different hash codes for two objects with the same values for `quantity` and `item`, but different values for other fields.

**Test Steps:**

1. Create two objects with the same values for `quantity` and `item`, but different values for other fields.
2. Call the `hashCode` method on both objects.
3. Compare the hash codes generated by the two objects.

**Expected Result:** The hash codes generated by the two objects should be different.

**Scenario 4:**

**Objective:** Verify that the `hashCode` method generates the same hash code for two objects that are equal according to the `equals` method.

**Test Steps:**

1. Create two objects that are equal according to the `equals` method.
2. Call the `hashCode` method on both objects.
3. Compare the hash codes generated by the two objects.

**Expected Result:** The hash codes generated by the two objects should be the same.

**Scenario 5:**

**Objective:** Verify that the `hashCode` method generates different hash codes for two objects that are not equal according to the `equals` method.

**Test Steps:**

1. Create two objects that are not equal according to the `equals` method.
2. Call the `hashCode` method on both objects.
3. Compare the hash codes generated by the two objects.

**Expected Result:** The hash codes generated by the two objects should be different.

These are just a few test scenarios that you can use to validate the business logic of the `hashCode` method in the provided code snippet. You can also create your own test scenarios based on the specific requirements of your application.
*/
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

class OrderLine_hashCode_5a2657087a_Test {

    @Test
    void testHashCodeForSameObjects() {
        OrderLine orderLine1 = new OrderLine(1, new Item());
        OrderLine orderLine2 = new OrderLine(1, new Item());

        assertEquals(orderLine1.hashCode(), orderLine2.hashCode());
    }

    @ParameterizedTest
    @CsvSource({
            "2, 1",
            "1, 2",
            "2, 2",
            "1, 1"
    })
    void testHashCodeForDifferentObjects(int quantity1, int quantity2) {
        OrderLine orderLine1 = new OrderLine(quantity1, new Item());
        OrderLine orderLine2 = new OrderLine(quantity2, new Item());

        assertNotEquals(orderLine1.hashCode(), orderLine2.hashCode());
    }

    @Test
    void testHashCodeForObjectsWithDifferentItems() {
        OrderLine orderLine1 = new OrderLine(1, new Item());
        OrderLine orderLine2 = new OrderLine(1, new Item());
        orderLine2.setItem(new Item());

        assertNotEquals(orderLine1.hashCode(), orderLine2.hashCode());
    }
}
