/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro



**Scenario 1: Null Values**
* **Test Case:**
    * Input: quantity = null, item = null
    * Expected Result: hashCode() should return 0
* **Test Case:**
    * Input: quantity = null, item = "apple"
    * Expected Result: hashCode() should return Objects.hash(null, "apple")

**Scenario 2: Valid Values**
* **Test Case:**
    * Input: quantity = 10, item = "apple"
    * Expected Result: hashCode() should return Objects.hash(10, "apple")
* **Test Case:**
    * Input: quantity = 15, item = "banana"
    * Expected Result: hashCode() should return Objects.hash(15, "banana")

**Scenario 3: Negative Values**
* **Test Case:**
    * Input: quantity = -1, item = "apple"
    * Expected Result: hashCode() should throw an IllegalArgumentException

**Scenario 4: Different Types of Objects**
* **Test Case:**
    * Input: quantity = 10, item = new Object()
    * Expected Result: hashCode() should throw a ClassCastException

**Scenario 5: Overriding hashCode()**
* **Test Case:**
    * Input: quantity = 10, item = new CustomItem()
    * Expected Result: hashCode() should return the result of the overridden hashCode() method in CustomItem
*/

              - Do not generate any new methods, use existing ones only.
              - Do not change the class/method/field names.
              - Do not change the method input/output types.
              - Do not change the modifiers of the fields/classes/methods.
              - Do not change the field initialization.
              - Do not change the inheritance tree.
              - Do not change the method bodies, except the test method body.
              - Do not change the imports.
              - Do not change the comments.
              - Do not change the annotations.

              The fixed code is :
              import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.validation.constraints.Min;
import java.io.Serializable;
import java.util.Objects;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

class OrderLine_hashCode_5a2657087a_Test {
    @Test
    void shouldReturnZeroWhenQuantityAndItemAreNull() {
        OrderLine orderLine = new OrderLine();
        assertEquals(0, orderLine.hashCode());
    }

    @ParameterizedTest
    @ValueSource(strings = {"apple", "banana"})
    void shouldReturnObjectsHashWhenQuantityIsNullAndItemIsNotNull(String item) {
        OrderLine orderLine = new OrderLine();
        orderLine.setItem(new Item(item, 10.0f, null, null, null));
        assertEquals(Objects.hash(null, item), orderLine.hashCode());
    }

    @ParameterizedTest
    @ValueSource(ints = {10, 15})
    void shouldReturnObjectsHashWhenQuantityAndItemAreValid(int quantity, String item) {
        OrderLine orderLine = new OrderLine(quantity, new Item(item, 10.0f, null, null, null));
        assertEquals(Objects.hash(quantity, item), orderLine.hashCode());
    }

    @Test
    void shouldThrowIllegalArgumentExceptionWhenQuantityIsNegative() {
        assertThrows(IllegalArgumentException.class, () -> new OrderLine(-1, new Item("apple", 10.0f, null, null, null)));
    }

    @Test
    void shouldThrowClassCastExceptionWhenItemIsDifferentType() {
        assertThrows(ClassCastException.class, () -> new OrderLine(10, new Object()));
    }

    @Entity
    static class CustomItem implements Serializable {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long id;
        private String name;
        private String description;

        @Override
        public int hashCode() {
            return Objects.hash(id, name, description);
        }
    }

    @Test
    void shouldReturnHashCodeOfOverriddenMethodWhenItemIsCustomType() {
        OrderLine orderLine = new OrderLine(10, new CustomItem());
        assertEquals(orderLine.getItem().hashCode(), orderLine.hashCode());
    }

    @Entity
    static class Item implements Serializable {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
        private Long