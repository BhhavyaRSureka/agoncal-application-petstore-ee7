/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro

 You should be able to write test scenarios just by reading the code snippet.

Here are some scenarios that can be used to test the `equals` method:

1. **Positive scenario 1:**

- Given two `Customer` objects with the same `login` value.
- When the `equals` method is called on one object with the other object as an argument.
- Then the method should return `true`.

2. **Positive scenario 2:**

- Given two `Customer` objects with different `login` values.
- When the `equals` method is called on one object with the other object as an argument.
- Then the method should return `false`.

3. **Negative scenario 1:**

- Given a `Customer` object and a `null` value.
- When the `equals` method is called on the object with the `null` value as an argument.
- Then the method should return `false`.

4. **Negative scenario 2:**

- Given a `Customer` object and an object of a different class.
- When the `equals` method is called on the object with the other object as an argument.
- Then the method should return `false`.
*/
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class Customer_equals_f2d574000d_Test {

    private Customer customer1;
    private Customer customer2;

    @Before
    public void setUp() {
        customer1 = new Customer("John", "Doe", "johndoe", "password", "johndoe@example.com", new Address());
        customer2 = new Customer("Jane", "Doe", "janedoe", "password", "janedoe@example.com", new Address());
    }

    @Test
    public void testEquals_positiveScenario1() {
        // Given two Customer objects with the same login value.
        customer1.setLogin("johndoe");
        customer2.setLogin("johndoe");

        // When the equals method is called on one object with the other object as an argument.
        boolean result = customer1.equals(customer2);

        // Then the method should return true.
        Assert.assertTrue(result);
    }

    @Test
    public void testEquals_positiveScenario2() {
        // Given two Customer objects with different login values.
        customer1.setLogin("johndoe");
        customer2.setLogin("janedoe");

        // When the equals method is called on one object with the other object as an argument.
        boolean result = customer1.equals(customer2);

        // Then the method should return false.
        Assert.assertFalse(result);
    }

    @Test
    public void testEquals_negativeScenario1() {
        // Given a Customer object and a null value.
        Customer customer = null;

        // When the equals method is called on the object with the null value as an argument.
        boolean result = customer1.equals(customer);

        // Then the method should return false.
        Assert.assertFalse(result);
    }

    @Test
    public void testEquals_negativeScenario2() {
        // Given a Customer object and an object of a different class.
        Object object = new Object();

        // When the equals method is called on the object with the other object as an argument.
        boolean result = customer1.equals(object);

        // Then the method should return false.
        Assert.assertFalse(result);
    }
}
