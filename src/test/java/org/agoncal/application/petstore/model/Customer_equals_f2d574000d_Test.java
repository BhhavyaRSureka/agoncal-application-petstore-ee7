/*
Test generated by RoostGPT for test JavaTesting using AI Type Open AI and AI Model gpt-4

Below are the test scenarios:

1. Test when both objects are exactly the same: In this case, the equals() method should return true as both objects are actually the same object.

2. Test when the object passed is null: The equals() method should return false because the function checks for null and should return false if the object is null.

3. Test when the object passed is of a different class: The equals() method should return false as the function checks for the class of the object and should return false if the class of the object is not the same as the class of the instance on which the method is called.

4. Test when the object passed is of the same class but has a different login: In this case, the equals() method should return false as the function checks for the login value and should return false if the login of the object is not the same as the login of the instance on which the method is called.

5. Test when the object passed is of the same class and has the same login: In this case, the equals() method should return true as the function checks for the login value and should return true if the login of the object is the same as the login of the instance on which the method is called.

6. Test when the object passed is of the same class, has the same login, but other properties are different: The equals() method should still return true as the function only checks for the login value and not the other properties.

7. Test when the login of the customer object is null: In this case, the equals() method should handle this and not throw a NullPointerException.

8. Test when the login of the object on which equals() is called is null: Again, the equals() method should handle this and not throw a NullPointerException.

9. Test when both the login of the customer object and the object on which equals() is called are null: The equals() method should handle this and not throw a NullPointerException.

10. Test with large data set: Test the performance and response time of the equals() method when it is called with a large number of objects.
*/
package org.agoncal.application.petstore.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class Customer_equals_f2d574000d_Test {

    private Customer customer1;
    private Customer customer2;

    @BeforeEach
    void setUp() {
        customer1 = new Customer();
        customer2 = new Customer();
    }

    @Test
    void testEqualsWithSameObject() {
        assertTrue(customer1.equals(customer1));
    }

    @Test
    void testEqualsWithNull() {
        assertFalse(customer1.equals(null));
    }

    @Test
    void testEqualsWithDifferentClass() {
        assertFalse(customer1.equals(new String()));
    }

    @Test
    void testEqualsWithSameClassDifferentLogin() {
        customer1.setLogin("login1");
        customer2.setLogin("login2");
        assertFalse(customer1.equals(customer2));
    }

    @Test
    void testEqualsWithSameClassSameLogin() {
        customer1.setLogin("login");
        customer2.setLogin("login");
        assertTrue(customer1.equals(customer2));
    }

    @Test
    void testEqualsWithSameClassSameLoginDifferentProperties() {
        customer1.setLogin("login");
        customer2.setLogin("login");
        customer1.setFirstName("firstName1");
        customer2.setFirstName("firstName2");
        assertTrue(customer1.equals(customer2));
    }

    @Test
    void testEqualsWithNullLoginInCustomerObject() {
        customer1.setLogin(null);
        customer2.setLogin("login");
        assertThrows(NullPointerException.class, () -> customer1.equals(customer2));
    }

    @Test
    void testEqualsWithNullLoginInThisObject() {
        customer1.setLogin("login");
        customer2.setLogin(null);
        assertThrows(NullPointerException.class, () -> customer1.equals(customer2));
    }

    @Test
    void testEqualsWithNullLoginInBothObjects() {
        customer1.setLogin(null);
        customer2.setLogin(null);
        assertThrows(NullPointerException.class, () -> customer1.equals(customer2));
    }

    // TODO: Add test case for large data set
}
