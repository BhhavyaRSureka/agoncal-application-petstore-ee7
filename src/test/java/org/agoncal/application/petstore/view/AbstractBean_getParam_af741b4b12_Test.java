/*
Test generated by RoostGPT for test JavaTesting using AI Type Open AI and AI Model gpt-4

1. Scenario: Check if the function correctly retrieves a parameter from the request map.
   - Given: A request with a parameter "param1" set to "value1".
   - When: The function getParam("param1") is called.
   - Then: The function should return "value1".

2. Scenario: Check if the function returns null when a requested parameter is not present in the request map.
   - Given: A request without a parameter "param1".
   - When: The function getParam("param1") is called.
   - Then: The function should return null.

3. Scenario: Check if the function handles multiple parameters correctly.
   - Given: A request with parameters "param1" set to "value1" and "param2" set to "value2".
   - When: The function getParam("param1") and getParam("param2") are called.
   - Then: The function should return "value1" and "value2" respectively.

4. Scenario: Check if the function correctly handles special characters in parameter values.
   - Given: A request with a parameter "param1" set to "!@#$%^&*()".
   - When: The function getParam("param1") is called.
   - Then: The function should return "!@#$%^&*()".

5. Scenario: Check if the function correctly handles empty parameter values.
   - Given: A request with a parameter "param1" set to an empty string.
   - When: The function getParam("param1") is called.
   - Then: The function should return an empty string.

6. Scenario: Check if the function correctly handles null parameter values.
   - Given: A request with a parameter "param1" set to null.
   - When: The function getParam("param1") is called.
   - Then: The function should return null.

7. Scenario: Check if the function correctly handles parameters with spaces in their names.
   - Given: A request with a parameter "param 1" set to "value1".
   - When: The function getParam("param 1") is called.
   - Then: The function should return "value1".

8. Scenario: Check if the function correctly handles case sensitivity in parameter names.
   - Given: A request with a parameter "Param1" set to "value1".
   - When: The function getParam("param1") is called.
   - Then: The function should return null.
   
9. Scenario: Check if the function correctly handles numbers in parameter names.
   - Given: A request with a parameter "param123" set to "value1".
   - When: The function getParam("param123") is called.
   - Then: The function should return "value1".
*/
package org.agoncal.application.petstore.view;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.mockito.Mockito.when;

public class AbstractBean_getParam_af741b4b12_Test {

    private AbstractBean abstractBean;

    @Mock
    private FacesContext facesContext;

    @Mock
    private ExternalContext externalContext;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        abstractBean = new AbstractBean();
        when(facesContext.getExternalContext()).thenReturn(externalContext);
    }

    @Test
    public void testGetParam() {
        Map<String, String> requestParameterMap = new HashMap<>();
        requestParameterMap.put("param1", "value1");
        when(externalContext.getRequestParameterMap()).thenReturn(requestParameterMap);

        String result = abstractBean.getParam("param1");

        assertEquals("value1", result);
    }

    @Test
    public void testGetParam_whenParamNotPresent() {
        Map<String, String> requestParameterMap = new HashMap<>();
        when(externalContext.getRequestParameterMap()).thenReturn(requestParameterMap);

        String result = abstractBean.getParam("param1");

        assertNull(result);
    }

    @Test
    public void testGetParam_withMultipleParams() {
        Map<String, String> requestParameterMap = new HashMap<>();
        requestParameterMap.put("param1", "value1");
        requestParameterMap.put("param2", "value2");
        when(externalContext.getRequestParameterMap()).thenReturn(requestParameterMap);

        String result1 = abstractBean.getParam("param1");
        String result2 = abstractBean.getParam("param2");

        assertEquals("value1", result1);
        assertEquals("value2", result2);
    }

    @Test
    public void testGetParam_withSpecialCharacters() {
        Map<String, String> requestParameterMap = new HashMap<>();
        requestParameterMap.put("param1", "!@#$%^&*()");
        when(externalContext.getRequestParameterMap()).thenReturn(requestParameterMap);

        String result = abstractBean.getParam("param1");

        assertEquals("!@#$%^&*()", result);
    }

    @Test
    public void testGetParam_withEmptyStringValue() {
        Map<String, String> requestParameterMap = new HashMap<>();
        requestParameterMap.put("param1", "");
        when(externalContext.getRequestParameterMap()).thenReturn(requestParameterMap);

        String result = abstractBean.getParam("param1");

        assertEquals("", result);
    }

    @Test
    public void testGetParam_withNullValue() {
        Map<String, String> requestParameterMap = new HashMap<>();
        requestParameterMap.put("param1", null);
        when(externalContext.getRequestParameterMap()).thenReturn(requestParameterMap);

        String result = abstractBean.getParam("param1");

        assertNull(result);
    }

    @Test
    public void testGetParam_withSpacesInParamName() {
        Map<String, String> requestParameterMap = new HashMap<>();
        requestParameterMap.put("param 1", "value1");
        when(externalContext.getRequestParameterMap()).thenReturn(requestParameterMap);

        String result = abstractBean.getParam("param 1");

        assertEquals("value1", result);
    }

    @Test
    public void testGetParam_withCaseSensitivity() {
        Map<String, String> requestParameterMap = new HashMap<>();
        requestParameterMap.put("Param1", "value1");
        when(externalContext.getRequestParameterMap()).thenReturn(requestParameterMap);

        String result = abstractBean.getParam("param1");

        assertNull(result);
    }

    @Test
    public void testGetParam_withNumbersInParamName() {
        Map<String, String> requestParameterMap = new HashMap<>();
        requestParameterMap.put("param123", "value1");
        when(externalContext.getRequestParameterMap()).thenReturn(requestParameterMap);

        String result = abstractBean.getParam("param123");

        assertEquals("value1", result);
    }
}
