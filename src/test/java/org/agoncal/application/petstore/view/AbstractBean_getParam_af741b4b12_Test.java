/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro

 We need your help to write test scenarios for the code snippet of the function `getParam` to validate business logic. Do not write any test code to validate. The function `getParam` is used to get the value of a parameter from the request.

**Test Scenario 1:**

* **Objective:** To validate that the function `getParam` is able to get the value of a parameter from the request.
* **Steps:**
    * Create a request with a parameter named "param" and a value of "value".
    * Call the function `getParam` with the parameter name "param".
    * Assert that the returned value is "value".

**Test Scenario 2:**

* **Objective:** To validate that the function `getParam` is able to get the value of a parameter from the request, even if the parameter name contains special characters.
* **Steps:**
    * Create a request with a parameter named "param_with_special_characters" and a value of "value_with_special_characters".
    * Call the function `getParam` with the parameter name "param_with_special_characters".
    * Assert that the returned value is "value_with_special_characters".

**Test Scenario 3:**

* **Objective:** To validate that the function `getParam` is able to get the value of a parameter from the request, even if the parameter name is not present in the request.
* **Steps:**
    * Create a request without a parameter named "param".
    * Call the function `getParam` with the parameter name "param".
    * Assert that the returned value is null.

**Test Scenario 4:**

* **Objective:** To validate that the function `getParam` is able to get the value of a parameter from the request, even if the parameter value is empty.
* **Steps:**
    * Create a request with a parameter named "param" and an empty value.
    * Call the function `getParam` with the parameter name "param".
    * Assert that the returned value is an empty string.

**Test Scenario 5:**

* **Objective:** To validate that the function `getParam` is able to get the value of a parameter from the request, even if the parameter value contains multiple values.
* **Steps:**
    * Create a request with a parameter named "param" and multiple values.
    * Call the function `getParam` with the parameter name "param".
    * Assert that the returned value is a comma-separated string of the parameter values.
*/
import file name is org.agoncal.application.petstore.util.Loggable 
import file name is javax.faces.application.FacesMessage 
import file name is javax.faces.context.FacesContext 
import file name is javax.inject.Inject 
import file name is java.text.MessageFormat 
import file name is java.util.Locale 
import file name is java.util.Map 
import file name is java.util.ResourceBundle 
import file name is java.util.logging.Logger 

@Loggable
public class AbstractBean {

    @Inject
    private FacesContext facesContext;

    public String getMessage(FacesContext facesContext, String msgKey, Object... args) {
        Locale locale = facesContext.getViewRoot().getLocale();
        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
        ResourceBundle bundle = ResourceBundle.getBundle("Messages", locale, classLoader);
        String msgValue = bundle.getString(msgKey);
        return MessageFormat.format(msgValue, args);
    }

    public void addInformationMessage(String message, Object... args) {
        FacesContext context = FacesContext.getCurrentInstance();
        context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, getMessage(context, message, args), null));
    }

    public void addWarningMessage(String message, Object... args) {
        FacesContext context = FacesContext.getCurrentInstance();
        context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, getMessage(context, message, args), null));
    }

    public void addErrorMessage(String message, Object... args) {
        FacesContext context = FacesContext.getCurrentInstance();
        context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, getMessage(context, message, args), null));
    }

    public String getParam(String param) {
        FacesContext context = FacesContext.getCurrentInstance();
        Map<String, String> map = context.getExternalContext().getRequestParameterMap();
        return map.get(param);
    }

    public Long getParamId(String param) {
        return Long.valueOf(getParam(param));
    }

    private transient Logger logger;

}
              