/*
Test generated by RoostGPT for test JavaTesting using AI Type Open AI and AI Model gpt-4

1. Scenario: Test with valid message and arguments
   - Input: Call the function with a valid message and valid arguments.
   - Expected Output: The function should execute successfully and an information message should be added to the FacesContext.

2. Scenario: Test with valid message and no arguments
   - Input: Call the function with a valid message and without any arguments.
   - Expected Output: The function should execute successfully and an information message should be added to the FacesContext.

3. Scenario: Test with valid message and null arguments
   - Input: Call the function with a valid message and null arguments.
   - Expected Output: The function should execute successfully and an information message should be added to the FacesContext.

4. Scenario: Test with empty message and valid arguments
   - Input: Call the function with an empty message and valid arguments.
   - Expected Output: The function should execute successfully and an information message should be added to the FacesContext. 

5. Scenario: Test with null message and valid arguments
   - Input: Call the function with a null message and valid arguments.
   - Expected Output: The function should throw a NullPointerException. 

6. Scenario: Test with valid message and arguments when FacesContext is not available
   - Input: Call the function with a valid message and arguments when FacesContext is not available.
   - Expected Output: The function should throw a NullPointerException. 

7. Scenario: Test with valid message and arguments when FacesContext is available but not initialized
   - Input: Call the function with a valid message and arguments when FacesContext is available but not initialized.
   - Expected Output: The function should throw an IllegalStateException.

8. Scenario: Test with valid message and arguments when FacesContext is available and initialized
   - Input: Call the function with a valid message and arguments when FacesContext is available and initialized.
   - Expected Output: The function should execute successfully and an information message should be added to the FacesContext.

9. Scenario: Test with valid message and arguments when FacesContext is available and initialized, but the message cannot be added
   - Input: Call the function with a valid message and arguments when FacesContext is available and initialized, but the message cannot be added due to some error.
   - Expected Output: The function should throw an Exception or Error. 

10. Scenario: Test with a message that requires arguments but no arguments provided
    - Input: Call the function with a message that requires arguments but no arguments provided.
    - Expected Output: The function should throw a MissingFormatArgumentException.
*/
package org.agoncal.application.petstore.view;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class AbstractBean_addInformationMessage_ed877c9f01_Test {

    @Mock
    private FacesContext facesContext;

    @Test
    public void testAddInformationMessage_ValidMessageAndArgs() {
        AbstractBean abstractBean = new AbstractBean();
        when(facesContext.getCurrentInstance()).thenReturn(facesContext);
        abstractBean.addInformationMessage("Valid Message", "Valid Args");
        verify(facesContext, times(1)).addMessage(any(), any(FacesMessage.class));
    }

    @Test
    public void testAddInformationMessage_ValidMessageNoArgs() {
        AbstractBean abstractBean = new AbstractBean();
        when(facesContext.getCurrentInstance()).thenReturn(facesContext);
        abstractBean.addInformationMessage("Valid Message");
        verify(facesContext, times(1)).addMessage(any(), any(FacesMessage.class));
    }

    @Test
    public void testAddInformationMessage_ValidMessageNullArgs() {
        AbstractBean abstractBean = new AbstractBean();
        when(facesContext.getCurrentInstance()).thenReturn(facesContext);
        abstractBean.addInformationMessage("Valid Message", null);
        verify(facesContext, times(1)).addMessage(any(), any(FacesMessage.class));
    }

    @Test
    public void testAddInformationMessage_EmptyMessage() {
        AbstractBean abstractBean = new AbstractBean();
        when(facesContext.getCurrentInstance()).thenReturn(facesContext);
        abstractBean.addInformationMessage("", "Valid Args");
        verify(facesContext, times(1)).addMessage(any(), any(FacesMessage.class));
    }

    @Test(expected = NullPointerException.class)
    public void testAddInformationMessage_NullMessage() {
        AbstractBean abstractBean = new AbstractBean();
        when(facesContext.getCurrentInstance()).thenReturn(facesContext);
        abstractBean.addInformationMessage(null, "Valid Args");
    }

    @Test(expected = NullPointerException.class)
    public void testAddInformationMessage_NoFacesContext() {
        AbstractBean abstractBean = new AbstractBean();
        when(facesContext.getCurrentInstance()).thenReturn(null);
        abstractBean.addInformationMessage("Valid Message", "Valid Args");
    }

    @Test(expected = IllegalStateException.class)
    public void testAddInformationMessage_UninitializedFacesContext() {
        AbstractBean abstractBean = new AbstractBean();
        when(facesContext.getCurrentInstance()).thenThrow(new IllegalStateException());
        abstractBean.addInformationMessage("Valid Message", "Valid Args");
    }

    @Test
    public void testAddInformationMessage_InitializedFacesContext() {
        AbstractBean abstractBean = new AbstractBean();
        when(facesContext.getCurrentInstance()).thenReturn(facesContext);
        abstractBean.addInformationMessage("Valid Message", "Valid Args");
        verify(facesContext, times(1)).addMessage(any(), any(FacesMessage.class));
    }

    @Test(expected = Exception.class)
    public void testAddInformationMessage_UnableToAddMessage() {
        AbstractBean abstractBean = new AbstractBean();
        when(facesContext.getCurrentInstance()).thenReturn(facesContext);
        doThrow(new Exception()).when(facesContext).addMessage(any(), any(FacesMessage.class));
        abstractBean.addInformationMessage("Valid Message", "Valid Args");
    }

    @Test(expected = MissingFormatArgumentException.class)
    public void testAddInformationMessage_MessageNeedsArgsButNoneProvided() {
        AbstractBean abstractBean = new AbstractBean();
        when(facesContext.getCurrentInstance()).thenReturn(facesContext);
        abstractBean.addInformationMessage("Message {0}", null);
    }
}
