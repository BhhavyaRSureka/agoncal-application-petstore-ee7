// Test generated by RoostGPT for test JavyaUnitTesting using AI Type Open AI and AI Model gpt-4

package org.agoncal.application.petstore.view;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

public class AbstractBean_getParamId_c151932853_Test {

    @InjectMocks
    private AbstractBean abstractBean;

    @Mock
    private FacesContext facesContext;

    @Mock
    private ExternalContext externalContext;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetParamId() {
        Map<String, String> params = new HashMap<>();
        params.put("testParam", "12345");
        when(facesContext.getExternalContext()).thenReturn(externalContext);
        when(externalContext.getRequestParameterMap()).thenReturn(params);
        Long result = abstractBean.getParamId("testParam");
        assertEquals(Long.valueOf(12345), result);
    }

    @Test(expected = NumberFormatException.class)
    public void testGetParamIdNonNumeric() {
        Map<String, String> params = new HashMap<>();
        params.put("testParam", "nonNumeric");
        when(facesContext.getExternalContext()).thenReturn(externalContext);
        when(externalContext.getRequestParameterMap()).thenReturn(params);
        abstractBean.getParamId("testParam");
    }

    @Test
    public void testGetParamIdNoParam() {
        Map<String, String> params = new HashMap<>();
        when(facesContext.getExternalContext()).thenReturn(externalContext);
        when(externalContext.getRequestParameterMap()).thenReturn(params);
        Long result = abstractBean.getParamId("testParam");
        assertEquals(null, result);
    }
}
