// Test generated by RoostGPT for test JavyaUnitTesting using AI Type Open AI and AI Model gpt-4

package org.agoncal.application.petstore.view;

import org.junit.*;
import org.junit.runner.RunWith;
import org.mockito.*;
import org.mockito.junit.MockitoJUnitRunner;
import javax.faces.context.FacesContext;
import javax.faces.context.ExternalContext;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class AbstractBean_getParamId_c151932853_Test {

    @InjectMocks 
    private AbstractBean abstractBean;

    @Mock
    private FacesContext facesContext;

    @Mock
    private ExternalContext externalContext;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetParamId() {
        String testParam = "testParam";
        String testValue = "123456";
        Map<String, String> testMap = new HashMap<>();
        testMap.put(testParam, testValue);

        when(facesContext.getExternalContext()).thenReturn(externalContext);
        when(externalContext.getRequestParameterMap()).thenReturn(testMap);

        Long expected = Long.valueOf(testValue);
        Long result = abstractBean.getParamId(testParam);
        assertEquals(expected, result);
    }

    @Test
    public void testGetParamIdWithInvalidValue() {
        String testParam = "testParam";
        String invalidValue = "invalid";
        Map<String, String> testMap = new HashMap<>();
        testMap.put(testParam, invalidValue);

        when(facesContext.getExternalContext()).thenReturn(externalContext);
        when(externalContext.getRequestParameterMap()).thenReturn(testMap);

        try {
            abstractBean.getParamId(testParam);
            fail("Expected NumberFormatException to be thrown");
        } catch (NumberFormatException e) {
            assertTrue(e.getMessage().contains("For input string: \"" + invalidValue + "\""));
        }
    }
}
