/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro



Here are some test scenarios for the given code snippet:

**Scenario 1:**
* Purpose: To verify that the logger is correctly created for the class where it is injected.
* Test Steps:
    1. Create a Java class with a method that uses the `@Inject` annotation to inject the logger.
    2. Create a test method that calls the method from step 1 and verifies that the logger is created and initialized with the correct name.
    3. Assert that the logger name matches the fully qualified class name of the class where it is injected.

**Scenario 2:**
* Purpose: To ensure that the logger is correctly injected into multiple classes.
* Test Steps:
    1. Create two Java classes with methods that use the `@Inject` annotation to inject the logger.
    2. Create a test method that calls the methods from step 1 and verifies that the logger is created and initialized with the correct name for both classes.
    3. Assert that the logger names match the fully qualified class names of the respective classes.

**Scenario 3:**
* Purpose: To test the behavior of the logger when it is injected into a static method.
* Test Steps:
    1. Create a Java class with a static method that uses the `@Inject` annotation to inject the logger.
    2. Create a test method that calls the static method from step 1 and verifies that the logger is created and initialized with the correct name.
    3. Assert that the logger name matches the fully qualified class name of the class where the static method is defined.

**Scenario 4:**
* Purpose: To verify that the logger is correctly injected into a constructor.
* Test Steps:
    1. Create a Java class with a constructor that uses the `@Inject` annotation to inject the logger.
    2. Create a test method that instantiates the class from step 1 and verifies that the logger is created and initialized with the correct name.
    3. Assert that the logger name matches the fully qualified class name of the class where the constructor is defined.

**Scenario 5:**
* Purpose: To test the behavior of the logger when it is injected into a bean that is not managed by CDI.
* Test Steps:
    1. Create a Java class that is not annotated with `@ManagedBean` or `@Singleton`.
    2. Create a method in the class from step 1 that uses the `@Inject` annotation to inject the logger.
    3. Create a test method that calls the method from step 2 and verifies that the logger is created and initialized with the correct name.
    4. Assert that the logger name matches the fully qualified class name of the class where the method is defined.
*/
import javax.enterprise.inject.Produces;
import javax.enterprise.inject.spi.InjectionPoint;
import java.util.logging.Logger;

public class LoggingProducer {

    @Produces
    public Logger produceLogger(InjectionPoint injectionPoint) {
        return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());
    }
}
              