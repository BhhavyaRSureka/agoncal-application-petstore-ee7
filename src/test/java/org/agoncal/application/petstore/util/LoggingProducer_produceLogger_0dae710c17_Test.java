/*
Test generated by RoostGPT for test JavaTesting using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Logger Creation
Description: Validate that the function correctly creates a logger for the class from which it is called.

Test Scenario 2: Correct Class Name
Description: Verify that the logger is created with the correct class name. The logger's name should match the name of the class from which the function was called.

Test Scenario 3: Null Injection Point
Description: Validate the function's behavior when a null InjectionPoint is passed. Depending on the implementation, it may throw an exception or return a default Logger.

Test Scenario 4: Injection Point with Non-Existent Class
Description: Test the function's behavior when an InjectionPoint associated with a non-existent class is passed. The function should handle this gracefully, likely by throwing an exception.

Test Scenario 5: Injection Point with Anonymous Class
Description: Validate the function's behavior when an InjectionPoint associated with an anonymous class is passed. The function should still be able to create a Logger, but the logger's name may be different than expected due to the anonymous class.

Test Scenario 6: Multiple Logger Creation
Description: Test the function's behavior when it is called multiple times from the same class. It should always return a logger with the same name, even if it is called multiple times.

Test Scenario 7: Logger Creation from Different Classes
Description: Validate that the function returns loggers with different names when it is called from different classes. The logger's name should always match the name of the class from which it was called.

Test Scenario 8: Logger Creation with Inheritance
Description: Test the function's behavior when it is called from a subclass. The logger's name should match the name of the subclass, not the superclass.
*/
package org.agoncal.application.petstore.util;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import javax.enterprise.inject.spi.InjectionPoint;
import java.util.logging.Logger;

public class LoggingProducer_produceLogger_0dae710c17_Test {

    @Test
    public void testProduceLogger() {
        // instantiate the class
        LoggingProducer loggingProducer = new LoggingProducer();

        // Mock the InjectionPoint
        InjectionPoint injectionPoint = Mockito.mock(InjectionPoint.class);
        Mockito.when(injectionPoint.getMember().getDeclaringClass().getName()).thenReturn("org.agoncal.application.petstore.util.LoggingProducer");

        // Call the method and assert the Logger is not null and has the correct name
        Logger logger = loggingProducer.produceLogger(injectionPoint);
        Assertions.assertNotNull(logger);
        Assertions.assertEquals("org.agoncal.application.petstore.util.LoggingProducer", logger.getName());
    }

    @Test
    public void testProduceLogger_NullInjectionPoint() {
        LoggingProducer loggingProducer = new LoggingProducer();

        Assertions.assertThrows(NullPointerException.class, () -> {
            loggingProducer.produceLogger(null);
        });
    }

    @Test
    public void testProduceLogger_NonExistentClass() {
        LoggingProducer loggingProducer = new LoggingProducer();

        InjectionPoint injectionPoint = Mockito.mock(InjectionPoint.class);
        Mockito.when(injectionPoint.getMember().getDeclaringClass().getName()).thenReturn("non.existent.Class");

        Assertions.assertThrows(Exception.class, () -> {
            loggingProducer.produceLogger(injectionPoint);
        });
    }

    @Test
    public void testProduceLogger_AnonymousClass() {
        LoggingProducer loggingProducer = new LoggingProducer();

        InjectionPoint injectionPoint = Mockito.mock(InjectionPoint.class);
        Mockito.when(injectionPoint.getMember().getDeclaringClass().getName()).thenReturn(getClass().getName() + "$1");

        Logger logger = loggingProducer.produceLogger(injectionPoint);
        Assertions.assertNotNull(logger);
        Assertions.assertEquals(getClass().getName() + "$1", logger.getName());
    }

    @Test
    public void testProduceLogger_MultipleLoggerCreation() {
        LoggingProducer loggingProducer = new LoggingProducer();

        InjectionPoint injectionPoint = Mockito.mock(InjectionPoint.class);
        Mockito.when(injectionPoint.getMember().getDeclaringClass().getName()).thenReturn("org.agoncal.application.petstore.util.LoggingProducer");

        Logger logger1 = loggingProducer.produceLogger(injectionPoint);
        Logger logger2 = loggingProducer.produceLogger(injectionPoint);

        Assertions.assertNotNull(logger1);
        Assertions.assertNotNull(logger2);
        Assertions.assertEquals(logger1.getName(), logger2.getName());
    }

    @Test
    public void testProduceLogger_DifferentClasses() {
        LoggingProducer loggingProducer = new LoggingProducer();

        InjectionPoint injectionPoint1 = Mockito.mock(InjectionPoint.class);
        Mockito.when(injectionPoint1.getMember().getDeclaringClass().getName()).thenReturn("org.agoncal.application.petstore.util.LoggingProducer");

        InjectionPoint injectionPoint2 = Mockito.mock(InjectionPoint.class);
        Mockito.when(injectionPoint2.getMember().getDeclaringClass().getName()).thenReturn("org.agoncal.application.petstore.util.SomeOtherClass");

        Logger logger1 = loggingProducer.produceLogger(injectionPoint1);
        Logger logger2 = loggingProducer.produceLogger(injectionPoint2);

        Assertions.assertNotNull(logger1);
        Assertions.assertNotNull(logger2);
        Assertions.assertNotEquals(logger1.getName(), logger2.getName());
    }

    @Test
    public void testProduceLogger_Inheritance() {
        LoggingProducer loggingProducer = new LoggingProducer();

        InjectionPoint injectionPoint = Mockito.mock(InjectionPoint.class);
        Mockito.when(injectionPoint.getMember().getDeclaringClass().getName()).thenReturn("org.agoncal.application.petstore.util.SubClass");

        Logger logger = loggingProducer.produceLogger(injectionPoint);
        Assertions.assertNotNull(logger);
        Assertions.assertEquals("org.agoncal.application.petstore.util.SubClass", logger.getName());
    }
}
