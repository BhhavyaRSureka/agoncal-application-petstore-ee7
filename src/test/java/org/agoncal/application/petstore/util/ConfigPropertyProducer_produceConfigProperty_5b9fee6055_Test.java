/*
Test generated by RoostGPT for test GeminiTest using AI Type Vertex AI and AI Model gemini-pro

 Write a list of test scenarios for the given code snippet `produceConfigProperty` to validate business logic.

**Test Scenario 1:**
**Objective:** Verify that `produceConfigProperty` returns the correct value for a valid configuration property key.

**Test Steps:**
1. Set up a Java class with a field annotated with `@ConfigProperty("test.property")`.
2. Create a mock `Properties` object and add a property with the key "test.property" and a value of "test-value".
3. Inject the `Properties` object into the Java class using CDI.
4. Call the `produceConfigProperty` method with the injection point of the field annotated with `@ConfigProperty`.
5. Assert that the returned value is "test-value".

**Test Scenario 2:**
**Objective:** Verify that `produceConfigProperty` throws an exception when the configuration property key is not found.

**Test Steps:**
1. Set up a Java class with a field annotated with `@ConfigProperty("non-existent.property")`.
2. Create a mock `Properties` object without the property "non-existent.property".
3. Inject the `Properties` object into the Java class using CDI.
4. Call the `produceConfigProperty` method with the injection point of the field annotated with `@ConfigProperty`.
5. Assert that the method throws an `IOException`.

**Test Scenario 3:**
**Objective:** Verify that `produceConfigProperty` returns the default value when the configuration property key is not found and a default value is specified.

**Test Steps:**
1. Set up a Java class with a field annotated with `@ConfigProperty(value = "non-existent.property", defaultValue = "default-value")`.
2. Create a mock `Properties` object without the property "non-existent.property".
3. Inject the `Properties` object into the Java class using CDI.
4. Call the `produceConfigProperty` method with the injection point of the field annotated with `@ConfigProperty`.
5. Assert that the returned value is "default-value".

**Test Scenario 4:**
**Objective:** Verify that `produceConfigProperty` returns the correct value for a configuration property key when the property value is type of Integer.

**Test Steps:**
1. Set up a Java class with a field annotated with `@ConfigProperty("test.property.integer")`.
2. Create a mock `Properties` object and add a property with the key "test.property.integer" and a value of "123".
3. Inject the `Properties` object into the Java class using CDI.
4. Call the `produceConfigProperty` method with the injection point of the field annotated with `@ConfigProperty`.
5. Assert that the returned value is 123.

**Test Scenario 5:**
**Objective:** Verify that `produceConfigProperty` returns the correct value for a configuration property key when the property value is type of Boolean.

**Test Steps:**
1. Set up a Java class with a field annotated with `@ConfigProperty("test.property.boolean")`.
2. Create a mock `Properties` object and add a property with the key "test.property.boolean" and a value of "true".
3. Inject the `Properties` object into the Java class using CDI.
4. Call the `produceConfigProperty` method with the injection point of the field annotated with `@ConfigProperty`.
5. Assert that the returned value is true.
*/
import javax.enterprise.inject.Produces;
import javax.enterprise.inject.spi.InjectionPoint;
import java.io.IOException;
import java.util.Properties;

public class ConfigPropertyProducer {
    private static Properties props;

    @Produces
    public String produceConfigProperty(InjectionPoint ip) throws IOException {
        String key = ip.getAnnotated().getAnnotation(ConfigProperty.class).value();
        return props.getProperty(key);
    }
}
