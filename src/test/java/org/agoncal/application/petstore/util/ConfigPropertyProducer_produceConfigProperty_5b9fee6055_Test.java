/*
Test generated by RoostGPT for test JavaTesting using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Valid Key
- Description: Test the function with a valid key. The key exists in the properties file.
- Expected Result: The function should return the corresponding value from the properties file.

Test Scenario 2: Invalid Key
- Description: Test the function with an invalid key. The key does not exist in the properties file.
- Expected Result: The function should return null as there is no corresponding value in the properties file.

Test Scenario 3: Null Key
- Description: Test the function with a null key.
- Expected Result: The function should throw a NullPointerException.

Test Scenario 4: Empty Key
- Description: Test the function with an empty string as the key.
- Expected Result: The function should return null as there is no corresponding value in the properties file.

Test Scenario 5: Key with Leading and Trailing Spaces
- Description: Test the function with a key that has leading and trailing spaces.
- Expected Result: The function should trim the spaces and return the corresponding value from the properties file.

Test Scenario 6: Key with Special Characters
- Description: Test the function with a key that contains special characters.
- Expected Result: The function should return the corresponding value from the properties file if it exists. Otherwise, it should return null.

Test Scenario 7: Key with Case Difference
- Description: Test the function with a key that has a case difference from the key in the properties file.
- Expected Result: The function should be case sensitive and return null if the case does not match exactly.

Test Scenario 8: Properties File Not Found
- Description: Test the function when the properties file does not exist.
- Expected Result: The function should throw an IOException. 

Test Scenario 9: Properties File with No Read Permission
- Description: Test the function when the properties file exists but there is no read permission for it.
- Expected Result: The function should throw a SecurityException. 

Test Scenario 10: Property Value with Special Characters
- Description: Test the function with a key whose corresponding value in the properties file contains special characters.
- Expected Result: The function should return the value as is, including the special characters. 

Test Scenario 11: Property Value with Spaces
- Description: Test the function with a key whose corresponding value in the properties file contains spaces.
- Expected Result: The function should return the value as is, including the spaces.
*/
package org.agoncal.application.petstore.util;

import javax.enterprise.inject.spi.InjectionPoint;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.util.Properties;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.mockito.Mockito.when;

public class ConfigPropertyProducer_produceConfigProperty_5b9fee6055_Test {

    private static Properties props;
    private static InjectionPoint ip;

    @Before
    public void setUp() {
        props = new Properties();
        ip = Mockito.mock(InjectionPoint.class);
    }

    @Test
    public void testProduceConfigProperty_ValidKey() {
        String expectedValue = "value";
        String key = "key";
        props.put(key, expectedValue);
        when(ip.getAnnotated().getAnnotation(ConfigProperty.class).value()).thenReturn(key);
        assertEquals(expectedValue, ConfigPropertyProducer.produceConfigProperty(ip));
    }

    @Test
    public void testProduceConfigProperty_InvalidKey() {
        String key = "invalidKey";
        when(ip.getAnnotated().getAnnotation(ConfigProperty.class).value()).thenReturn(key);
        assertNull(ConfigPropertyProducer.produceConfigProperty(ip));
    }

    @Test(expected = NullPointerException.class)
    public void testProduceConfigProperty_NullKey() {
        when(ip.getAnnotated().getAnnotation(ConfigProperty.class).value()).thenReturn(null);
        ConfigPropertyProducer.produceConfigProperty(ip);
    }

    @Test
    public void testProduceConfigProperty_EmptyKey() {
        String key = "";
        when(ip.getAnnotated().getAnnotation(ConfigProperty.class).value()).thenReturn(key);
        assertNull(ConfigPropertyProducer.produceConfigProperty(ip));
    }

    @Test
    public void testProduceConfigProperty_KeyWithSpaces() {
        String expectedValue = "value";
        String key = " key ";
        props.put(key.trim(), expectedValue);
        when(ip.getAnnotated().getAnnotation(ConfigProperty.class).value()).thenReturn(key);
        assertEquals(expectedValue, ConfigPropertyProducer.produceConfigProperty(ip));
    }

    // TODO: Add more test cases according to the scenarios mentioned above.
}
