// Test generated by RoostGPT for test JavyaUnitTesting using AI Type Open AI and AI Model gpt-4

package org.agoncal.application.petstore.util;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import javax.enterprise.inject.spi.InjectionPoint;
import java.util.Properties;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class ConfigPropertyProducer_produceConfigProperty_5b9fee6055_Test {

    @Mock
    private InjectionPoint ip;

    @Mock
    private Properties props;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
        ConfigPropertyProducer.props = props;
    }

    @Test
    public void testProduceConfigProperty() {
        when(ip.getAnnotated().getAnnotation(ConfigProperty.class).value()).thenReturn("testKey");
        when(props.getProperty("testKey")).thenReturn("testValue");

        String result = ConfigPropertyProducer.produceConfigProperty(ip);

        verify(ip, times(1)).getAnnotated();
        verify(props, times(1)).getProperty("testKey");
        assertEquals("testValue", result);
    }

    @Test
    public void testProduceConfigPropertyWhenPropertyDoesNotExist() {
        when(ip.getAnnotated().getAnnotation(ConfigProperty.class).value()).thenReturn("testKey");
        when(props.getProperty("testKey")).thenReturn(null);

        String result = ConfigPropertyProducer.produceConfigProperty(ip);

        verify(ip, times(1)).getAnnotated();
        verify(props, times(1)).getProperty("testKey");
        assertNull(result);
    }
}
